import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestQuery, TestQueryInterface } from "../../../contracts/test/TestQuery.js";
type TestQueryConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class TestQuery__factory extends ContractFactory {
    constructor(...args: TestQueryConstructorParams);
    deploy(_router: string, overrides?: Overrides & {
        from?: string;
    }): Promise<TestQuery>;
    getDeployTransaction(_router: string, overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): TestQuery;
    connect(signer: Signer): TestQuery__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b506040516107de3803806107de83398101604081905261002f91610054565b600080546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61074b806100936000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c806317b25d9714610046578063a44e96111461005b578063f887ea401461006e575b600080fd5b610059610054366004610529565b6100b7565b005b610059610069366004610572565b61018f565b60005461008e9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b60005473ffffffffffffffffffffffffffffffffffffffff16331461013d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f5465737451756572793a206e6f742066726f6d20726f7574657200000000000060448201526064015b60405180910390fd5b6040805183815273ffffffffffffffffffffffffffffffffffffffff831660208201527f34d2021ff0fd2db323dd42aa3bfa1b627b77be8793f87537f7fe5961d02dc738910160405180910390a15050565b600080546040517f2ead72f600000000000000000000000000000000000000000000000000000000815263ffffffff8516600482015261022f9173ffffffffffffffffffffffffffffffffffffffff1690632ead72f690602401602060405180830381865afa158015610206573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061022a91906105a7565b6103f4565b60408051600180825281830190925291925060009190816020015b6102756040805160808101825260009181019182526060808201529081908152602001606081525090565b81526020019060019003908161024a575050604080516004815260248082018352602080830180517f8da5cb5b000000000000000000000000000000000000000000000000000000007bffffffffffffffffffffffffffffffffffffffffffffffffffffffff9182161790915284518084018a905285518082039094018452604401909452810180519093167f17b25d97000000000000000000000000000000000000000000000000000000001790925291925061033491849161049d565b81600081518110610347576103476105c0565b60209081029190910101526000546040517f8cc02cab00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff90911690638cc02cab906103aa9087908590600401610653565b6020604051808303816000875af11580156103c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906103ed91906105a7565b5050505050565b600073ffffffffffffffffffffffffffffffffffffffff821115610499576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f5479706543617374733a2062797465733332546f41646472657373206f76657260448201527f666c6f77000000000000000000000000000000000000000000000000000000006064820152608401610134565b5090565b6104c86040805160808101825260009181019182526060808201529081908152602001606081525090565b50604080516080810182526000818301819052606080830181905283518085018552918252602091820152825180840190935273ffffffffffffffffffffffffffffffffffffffff9590951682528185019390935282529181019190915290565b6000806040838503121561053c57600080fd5b82359150602083013573ffffffffffffffffffffffffffffffffffffffff8116811461056757600080fd5b809150509250929050565b6000806040838503121561058557600080fd5b823563ffffffff8116811461059957600080fd5b946020939093013593505050565b6000602082840312156105b957600080fd5b5051919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b6000815180845260005b81811015610615576020818501810151868301820152016105f9565b5060006020828601015260207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f83011685010191505092915050565b6000604080830163ffffffff8616845260208281860152818651808452606093508387019150838160051b88010183890160005b83811015610705578983037fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa00185528151805189855280518a8601528701518885018a90526106d960808601826105ef565b91880151858303868a01529190506106f181836105ef565b968801969450505090850190600101610687565b50909a995050505050505050505056fea2646970667358221220458cbc95d85f6f05a8b94a374329b37bbc1b84616c542b9412d9ffd6432bfcf264736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_router";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly name: "Owner";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "domain";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint256";
            readonly name: "secret";
            readonly type: "uint256";
        }];
        readonly name: "queryRouterOwner";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "secret";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "owner";
            readonly type: "address";
        }];
        readonly name: "receiveRouterOwner";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "router";
        readonly outputs: readonly [{
            readonly internalType: "contract InterchainQueryRouter";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): TestQueryInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): TestQuery;
}
export {};
//# sourceMappingURL=TestQuery__factory.d.ts.map
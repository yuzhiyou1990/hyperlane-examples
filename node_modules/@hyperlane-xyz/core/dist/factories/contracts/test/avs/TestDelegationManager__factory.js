/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { utils, Contract, ContractFactory } from "ethers";
const _abi = [
    {
        anonymous: false,
        inputs: [
            {
                indexed: true,
                internalType: "address",
                name: "operator",
                type: "address",
            },
            {
                indexed: false,
                internalType: "string",
                name: "metadataURI",
                type: "string",
            },
        ],
        name: "OperatorMetadataURIUpdated",
        type: "event",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "operator",
                type: "address",
            },
            {
                internalType: "contract IStrategy[]",
                name: "strategies",
                type: "address[]",
            },
        ],
        name: "getOperatorShares",
        outputs: [
            {
                internalType: "uint256[]",
                name: "",
                type: "uint256[]",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
        ],
        name: "isOperator",
        outputs: [
            {
                internalType: "bool",
                name: "",
                type: "bool",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "",
                type: "address",
            },
            {
                internalType: "contract IStrategy",
                name: "",
                type: "address",
            },
        ],
        name: "operatorShares",
        outputs: [
            {
                internalType: "uint256",
                name: "",
                type: "uint256",
            },
        ],
        stateMutability: "view",
        type: "function",
    },
    {
        inputs: [
            {
                components: [
                    {
                        internalType: "address",
                        name: "earningsReceiver",
                        type: "address",
                    },
                    {
                        internalType: "address",
                        name: "delegationApprover",
                        type: "address",
                    },
                    {
                        internalType: "uint32",
                        name: "stakerOptOutWindowBlocks",
                        type: "uint32",
                    },
                ],
                internalType: "struct IDelegationManager.OperatorDetails",
                name: "registeringOperatorDetails",
                type: "tuple",
            },
            {
                internalType: "string",
                name: "metadataURI",
                type: "string",
            },
        ],
        name: "registerAsOperator",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
    {
        inputs: [
            {
                internalType: "address",
                name: "operator",
                type: "address",
            },
            {
                internalType: "bool",
                name: "_isOperatorReturnValue",
                type: "bool",
            },
        ],
        name: "setIsOperator",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b506105ff806100206000396000f3fe608060405234801561001057600080fd5b50600436106100675760003560e01c8063778e55f311610050578063778e55f3146100b957806390041347146100f2578063cbb5d4db1461011257600080fd5b80630f589e591461006c5780636d70f7ae14610081575b600080fd5b61007f61007a366004610280565b505050565b005b6100a461008f366004610330565b60006020819052908152604090205460ff1681565b60405190151581526020015b60405180910390f35b6100e46100c7366004610364565b600160209081526000928352604080842090915290825290205481565b6040519081526020016100b0565b6101056101003660046103cc565b610176565b6040516100b091906104c4565b61007f610120366004610508565b73ffffffffffffffffffffffffffffffffffffffff91909116600090815260208190526040902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016911515919091179055565b60606000825167ffffffffffffffff8111156101945761019461039d565b6040519080825280602002602001820160405280156101bd578160200160208202803683370190505b50905060005b83518110156102785773ffffffffffffffffffffffffffffffffffffffff8516600090815260016020526040812085519091908690849081106102085761020861053b565b602002602001015173ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205482828151811061025d5761025d61053b565b60209081029190910101526102718161056a565b90506101c3565b509392505050565b6000806000838503608081121561029657600080fd5b60608112156102a457600080fd5b50839250606084013567ffffffffffffffff808211156102c357600080fd5b818601915086601f8301126102d757600080fd5b8135818111156102e657600080fd5b8760208285010111156102f857600080fd5b6020830194508093505050509250925092565b73ffffffffffffffffffffffffffffffffffffffff8116811461032d57600080fd5b50565b60006020828403121561034257600080fd5b813561034d8161030b565b9392505050565b803561035f8161030b565b919050565b6000806040838503121561037757600080fd5b82356103828161030b565b915060208301356103928161030b565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600080604083850312156103df57600080fd5b82356103ea8161030b565b915060208381013567ffffffffffffffff8082111561040857600080fd5b818601915086601f83011261041c57600080fd5b81358181111561042e5761042e61039d565b8060051b6040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0603f830116810181811085821117156104715761047161039d565b60405291825284820192508381018501918983111561048f57600080fd5b938501935b828510156104b4576104a585610354565b84529385019392850192610494565b8096505050505050509250929050565b6020808252825182820181905260009190848201906040850190845b818110156104fc578351835292840192918401916001016104e0565b50909695505050505050565b6000806040838503121561051b57600080fd5b82356105268161030b565b91506020830135801515811461039257600080fd5b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82036105c2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b506001019056fea2646970667358221220c20750514476a38a65af7e62f93fde4f90888cf825d4877a7f0a12f88f6261f664736f6c63430008130033";
const isSuperArgs = (xs) => xs.length > 1;
export class TestDelegationManager__factory extends ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static bytecode = _bytecode;
    static abi = _abi;
    static createInterface() {
        return new utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new Contract(address, _abi, signerOrProvider);
    }
}
//# sourceMappingURL=TestDelegationManager__factory.js.map
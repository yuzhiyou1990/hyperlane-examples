/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { utils, Contract, ContractFactory } from "ethers";
const _abi = [
    {
        inputs: [
            {
                components: [
                    {
                        components: [
                            {
                                internalType: "contract IStrategy",
                                name: "strategy",
                                type: "address",
                            },
                            {
                                internalType: "uint96",
                                name: "multiplier",
                                type: "uint96",
                            },
                        ],
                        internalType: "struct IPaymentCoordinator.StrategyAndMultiplier[]",
                        name: "strategiesAndMultipliers",
                        type: "tuple[]",
                    },
                    {
                        internalType: "contract IERC20",
                        name: "token",
                        type: "address",
                    },
                    {
                        internalType: "uint256",
                        name: "amount",
                        type: "uint256",
                    },
                    {
                        internalType: "uint64",
                        name: "startTimestamp",
                        type: "uint64",
                    },
                    {
                        internalType: "uint64",
                        name: "duration",
                        type: "uint64",
                    },
                ],
                internalType: "struct IPaymentCoordinator.RangePayment[]",
                name: "rangePayments",
                type: "tuple[]",
            },
        ],
        name: "payForRange",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b50610702806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c806342b5c01014610030575b600080fd5b61004361003e3660046104a5565b610045565b005b60005b818110156100e2576100d033308585858181106100675761006761051a565b90506020028101906100799190610549565b6040013586868681811061008f5761008f61051a565b90506020028101906100a19190610549565b6100b2906040810190602001610587565b73ffffffffffffffffffffffffffffffffffffffff169291906100e7565b806100da816105c4565b915050610048565b505050565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd0000000000000000000000000000000000000000000000000000000017905261017c908590610182565b50505050565b60006101e4826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff166102969092919063ffffffff16565b90508051600014806102055750808060200190518101906102059190610623565b6100e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f7420737563636565640000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b60606102a584846000856102ad565b949350505050565b60608247101561033f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c0000000000000000000000000000000000000000000000000000606482015260840161028d565b6000808673ffffffffffffffffffffffffffffffffffffffff1685876040516103689190610669565b60006040518083038185875af1925050503d80600081146103a5576040519150601f19603f3d011682016040523d82523d6000602084013e6103aa565b606091505b50915091506103bb878383876103c6565b979650505050505050565b6060831561045c5782516000036104555773ffffffffffffffffffffffffffffffffffffffff85163b610455576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e7472616374000000604482015260640161028d565b50816102a5565b6102a583838151156104715781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161028d919061067b565b600080602083850312156104b857600080fd5b823567ffffffffffffffff808211156104d057600080fd5b818501915085601f8301126104e457600080fd5b8135818111156104f357600080fd5b8660208260051b850101111561050857600080fd5b60209290920196919550909350505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600082357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6183360301811261057d57600080fd5b9190910192915050565b60006020828403121561059957600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146105bd57600080fd5b9392505050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff820361061c577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b60006020828403121561063557600080fd5b815180151581146105bd57600080fd5b60005b83811015610660578181015183820152602001610648565b50506000910152565b6000825161057d818460208701610645565b602081526000825180602084015261069a816040850160208701610645565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fea26469706673582212205bca67705be3d476977ff87e1c029e350cac937e66b0c7577f1c5557e08e29b164736f6c63430008130033";
const isSuperArgs = (xs) => xs.length > 1;
export class TestPaymentCoordinator__factory extends ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static bytecode = _bytecode;
    static abi = _abi;
    static createInterface() {
        return new utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new Contract(address, _abi, signerOrProvider);
    }
}
//# sourceMappingURL=TestPaymentCoordinator__factory.js.map
import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { TestSlasher, TestSlasherInterface } from "../../../../contracts/test/avs/TestSlasher.js";
type TestSlasherConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class TestSlasher__factory extends ContractFactory {
    constructor(...args: TestSlasherConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string;
    }): Promise<TestSlasher>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): TestSlasher;
    connect(signer: Signer): TestSlasher__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5060ae8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806338c8ee6414602d575b600080fd5b603b6038366004603d565b50565b005b600060208284031215604e57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114607157600080fd5b939250505056fea2646970667358221220606b89e1180e1f74ceed4f293893841f4756a500a0298ad36c70b73ee32b43ee64736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "toBeFrozen";
            readonly type: "address";
        }];
        readonly name: "freezeOperator";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): TestSlasherInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): TestSlasher;
}
export {};
//# sourceMappingURL=TestSlasher__factory.d.ts.map
/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { utils, Contract, ContractFactory } from "ethers";
const _abi = [
    {
        inputs: [
            {
                internalType: "address",
                name: "toBeFrozen",
                type: "address",
            },
        ],
        name: "freezeOperator",
        outputs: [],
        stateMutability: "nonpayable",
        type: "function",
    },
];
const _bytecode = "0x608060405234801561001057600080fd5b5060ae8061001f6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c806338c8ee6414602d575b600080fd5b603b6038366004603d565b50565b005b600060208284031215604e57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114607157600080fd5b939250505056fea2646970667358221220606b89e1180e1f74ceed4f293893841f4756a500a0298ad36c70b73ee32b43ee64736f6c63430008130033";
const isSuperArgs = (xs) => xs.length > 1;
export class TestSlasher__factory extends ContractFactory {
    constructor(...args) {
        if (isSuperArgs(args)) {
            super(...args);
        }
        else {
            super(_abi, _bytecode, args[0]);
        }
    }
    deploy(overrides) {
        return super.deploy(overrides || {});
    }
    getDeployTransaction(overrides) {
        return super.getDeployTransaction(overrides || {});
    }
    attach(address) {
        return super.attach(address);
    }
    connect(signer) {
        return super.connect(signer);
    }
    static bytecode = _bytecode;
    static abi = _abi;
    static createInterface() {
        return new utils.Interface(_abi);
    }
    static connect(address, signerOrProvider) {
        return new Contract(address, _abi, signerOrProvider);
    }
}
//# sourceMappingURL=TestSlasher__factory.js.map
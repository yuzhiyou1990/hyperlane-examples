import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IStaticWeightedMultisigIsm, IStaticWeightedMultisigIsmInterface } from "../../../../../contracts/interfaces/isms/IWeightedMultisigIsm.sol/IStaticWeightedMultisigIsm.js";
export declare class IStaticWeightedMultisigIsm__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "moduleType";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "validatorsAndThresholdWeight";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "signingAddress";
                readonly type: "address";
            }, {
                readonly internalType: "uint96";
                readonly name: "weight";
                readonly type: "uint96";
            }];
            readonly internalType: "struct IStaticWeightedMultisigIsm.ValidatorInfo[]";
            readonly name: "validators";
            readonly type: "tuple[]";
        }, {
            readonly internalType: "uint96";
            readonly name: "thresholdWeight";
            readonly type: "uint96";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_metadata";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }];
        readonly name: "verify";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IStaticWeightedMultisigIsmInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IStaticWeightedMultisigIsm;
}
//# sourceMappingURL=IStaticWeightedMultisigIsm__factory.d.ts.map
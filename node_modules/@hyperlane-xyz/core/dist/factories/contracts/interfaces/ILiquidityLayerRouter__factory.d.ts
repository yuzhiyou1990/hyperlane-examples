import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { ILiquidityLayerRouter, ILiquidityLayerRouterInterface } from "../../../contracts/interfaces/ILiquidityLayerRouter.js";
export declare class ILiquidityLayerRouter__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_destinationDomain";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "_recipientAddress";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "_token";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "string";
            readonly name: "_bridge";
            readonly type: "string";
        }, {
            readonly internalType: "bytes";
            readonly name: "_messageBody";
            readonly type: "bytes";
        }];
        readonly name: "dispatchWithTokens";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): ILiquidityLayerRouterInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ILiquidityLayerRouter;
}
//# sourceMappingURL=ILiquidityLayerRouter__factory.d.ts.map
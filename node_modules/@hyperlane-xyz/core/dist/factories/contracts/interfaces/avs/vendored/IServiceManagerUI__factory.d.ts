import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IServiceManagerUI, IServiceManagerUIInterface } from "../../../../../contracts/interfaces/avs/vendored/IServiceManagerUI.js";
export declare class IServiceManagerUI__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "avsDirectory";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }];
        readonly name: "deregisterOperatorFromAVS";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }];
        readonly name: "getOperatorRestakedStrategies";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "getRestakeableStrategies";
        readonly outputs: readonly [{
            readonly internalType: "address[]";
            readonly name: "";
            readonly type: "address[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly components: readonly [{
                readonly internalType: "bytes";
                readonly name: "signature";
                readonly type: "bytes";
            }, {
                readonly internalType: "bytes32";
                readonly name: "salt";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint256";
                readonly name: "expiry";
                readonly type: "uint256";
            }];
            readonly internalType: "struct ISignatureUtils.SignatureWithSaltAndExpiry";
            readonly name: "operatorSignature";
            readonly type: "tuple";
        }];
        readonly name: "registerOperatorToAVS";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "string";
            readonly name: "_metadataURI";
            readonly type: "string";
        }];
        readonly name: "updateAVSMetadataURI";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IServiceManagerUIInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IServiceManagerUI;
}
//# sourceMappingURL=IServiceManagerUI__factory.d.ts.map
import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IDelegationManager, IDelegationManagerInterface } from "../../../../../contracts/interfaces/avs/vendored/IDelegationManager.js";
export declare class IDelegationManager__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "string";
            readonly name: "metadataURI";
            readonly type: "string";
        }];
        readonly name: "OperatorMetadataURIUpdated";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly internalType: "contract IStrategy[]";
            readonly name: "strategies";
            readonly type: "address[]";
        }];
        readonly name: "getOperatorShares";
        readonly outputs: readonly [{
            readonly internalType: "uint256[]";
            readonly name: "";
            readonly type: "uint256[]";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "address";
                readonly name: "earningsReceiver";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "delegationApprover";
                readonly type: "address";
            }, {
                readonly internalType: "uint32";
                readonly name: "stakerOptOutWindowBlocks";
                readonly type: "uint32";
            }];
            readonly internalType: "struct IDelegationManager.OperatorDetails";
            readonly name: "registeringOperatorDetails";
            readonly type: "tuple";
        }, {
            readonly internalType: "string";
            readonly name: "metadataURI";
            readonly type: "string";
        }];
        readonly name: "registerAsOperator";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): IDelegationManagerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IDelegationManager;
}
//# sourceMappingURL=IDelegationManager__factory.d.ts.map
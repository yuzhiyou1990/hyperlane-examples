import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockCircleMessageTransmitter, MockCircleMessageTransmitterInterface } from "../../../contracts/mock/MockCircleMessageTransmitter.js";
type MockCircleMessageTransmitterConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockCircleMessageTransmitter__factory extends ContractFactory {
    constructor(...args: MockCircleMessageTransmitterConstructorParams);
    deploy(_token: string, overrides?: Overrides & {
        from?: string;
    }): Promise<MockCircleMessageTransmitter>;
    getDeployTransaction(_token: string, overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): MockCircleMessageTransmitter;
    connect(signer: Signer): MockCircleMessageTransmitter__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5060405161050d38038061050d83398101604081905261002f91610054565b600180546001600160a01b0319166001600160a01b0392909216919091179055610084565b60006020828403121561006657600080fd5b81516001600160a01b038116811461007d57600080fd5b9392505050565b61047a806100936000396000f3fe608060405234801561001057600080fd5b506004361061004c5760003560e01c806337e3d6bc1461005157806357ecfd28146100f1578063fd2b1db314610118578063feb617241461012d575b600080fd5b6100de61005f36600461021a565b6040517fffffffff0000000000000000000000000000000000000000000000000000000060e084901b1660208201527fffffffffffffffff00000000000000000000000000000000000000000000000060c083901b166024820152600090602c0160405160208183030381529060405280519060200120905092915050565b6040519081526020015b60405180910390f35b6101086100ff3660046102e1565b50600192915050565b60405190151581526020016100e8565b61012b6101263660046103da565b610150565b005b61010861013b36600461042b565b60009081526020819052604090205460ff1690565b6000838152602081905260409081902080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660019081179091555490517f40c10f1900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff848116600483015260248201849052909116906340c10f1990604401600060405180830381600087803b1580156101fd57600080fd5b505af1158015610211573d6000803e3d6000fd5b50505050505050565b6000806040838503121561022d57600080fd5b823563ffffffff8116811461024157600080fd5b9150602083013567ffffffffffffffff8116811461025e57600080fd5b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60008083601f8401126102aa57600080fd5b50813567ffffffffffffffff8111156102c257600080fd5b6020830191508360208285010111156102da57600080fd5b9250929050565b6000806000604084860312156102f657600080fd5b833567ffffffffffffffff8082111561030e57600080fd5b818601915086601f83011261032257600080fd5b81358181111561033457610334610269565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f0116810190838211818310171561037a5761037a610269565b8160405282815289602084870101111561039357600080fd5b8260208601602083013760006020848301015280975050505060208601359150808211156103c057600080fd5b506103cd86828701610298565b9497909650939450505050565b6000806000606084860312156103ef57600080fd5b83359250602084013573ffffffffffffffffffffffffffffffffffffffff8116811461041a57600080fd5b929592945050506040919091013590565b60006020828403121561043d57600080fd5b503591905056fea2646970667358221220301e149fd6be77e2aeab77b8f294a74bfb8a8232d926cf4e9e073e6c1d39b56e64736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "contract MockToken";
            readonly name: "_token";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint32";
            readonly name: "_source";
            readonly type: "uint32";
        }, {
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly name: "hashSourceAndNonce";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_nonceId";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "_recipient";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }];
        readonly name: "process";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly name: "receiveMessage";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_nonceId";
            readonly type: "bytes32";
        }];
        readonly name: "usedNonces";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): MockCircleMessageTransmitterInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MockCircleMessageTransmitter;
}
export {};
//# sourceMappingURL=MockCircleMessageTransmitter__factory.d.ts.map
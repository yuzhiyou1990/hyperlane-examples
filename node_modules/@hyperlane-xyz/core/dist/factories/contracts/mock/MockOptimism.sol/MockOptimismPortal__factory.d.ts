import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockOptimismPortal, MockOptimismPortalInterface } from "../../../../contracts/mock/MockOptimism.sol/MockOptimismPortal.js";
type MockOptimismPortalConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockOptimismPortal__factory extends ContractFactory {
    constructor(...args: MockOptimismPortalConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string;
    }): Promise<MockOptimismPortal>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): MockOptimismPortal;
    connect(signer: Signer): MockOptimismPortal__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50610674806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c80638c3152e914610030575b600080fd5b61004361003e366004610465565b610045565b005b60006040518060600160405280610073846040015173ffffffffffffffffffffffffffffffffffffffff1690565b8152602001836060015181526020018360a0015181525090506100958161009a565b505050565b60606100bb6100ac83600001516100c1565b8360400151846020015161016f565b92915050565b600073ffffffffffffffffffffffffffffffffffffffff82111561016b576040517f08c379a0000000000000000000000000000000000000000000000000000000008152602060048201526024808201527f5479706543617374733a2062797465733332546f41646472657373206f76657260448201527f666c6f770000000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b5090565b60606101958484846040518060600160405280602981526020016106166029913961019d565b949350505050565b60608247101561022f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610162565b6000808673ffffffffffffffffffffffffffffffffffffffff16858760405161025891906105a8565b60006040518083038185875af1925050503d8060008114610295576040519150601f19603f3d011682016040523d82523d6000602084013e61029a565b606091505b50915091506102ab878383876102b6565b979650505050505050565b6060831561034c5782516000036103455773ffffffffffffffffffffffffffffffffffffffff85163b610345576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610162565b5081610195565b61019583838151156103615781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161016291906105c4565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b60405160c0810167ffffffffffffffff811182821017156103e7576103e7610395565b60405290565b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff8111828210171561043457610434610395565b604052919050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461046057600080fd5b919050565b6000602080838503121561047857600080fd5b823567ffffffffffffffff8082111561049057600080fd5b9084019060c082870312156104a457600080fd5b6104ac6103c4565b823581526104bb84840161043c565b848201526104cb6040840161043c565b6040820152606083013560608201526080830135608082015260a0830135828111156104f657600080fd5b80840193505086601f84011261050b57600080fd5b82358281111561051d5761051d610395565b61054d857fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016103ed565b9250808352878582860101111561056357600080fd5b808585018685013760009083019094019390935260a0830152509392505050565b60005b8381101561059f578181015183820152602001610587565b50506000910152565b600082516105ba818460208701610584565b9190910192915050565b60208152600082518060208401526105e3816040850160208701610584565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016919091016040019291505056fe416464726573733a206c6f772d6c6576656c2063616c6c20776974682076616c7565206661696c6564a2646970667358221220e92202b44241cbadf924c6b328e8ade80cd153e5ff04c932f8ba618a584018a564736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "WithdrawalTransactionFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint256";
                readonly name: "nonce";
                readonly type: "uint256";
            }, {
                readonly internalType: "address";
                readonly name: "sender";
                readonly type: "address";
            }, {
                readonly internalType: "address";
                readonly name: "target";
                readonly type: "address";
            }, {
                readonly internalType: "uint256";
                readonly name: "value";
                readonly type: "uint256";
            }, {
                readonly internalType: "uint256";
                readonly name: "gasLimit";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes";
                readonly name: "data";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IOptimismPortal.WithdrawalTransaction";
            readonly name: "_tx";
            readonly type: "tuple";
        }];
        readonly name: "finalizeWithdrawalTransaction";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): MockOptimismPortalInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MockOptimismPortal;
}
export {};
//# sourceMappingURL=MockOptimismPortal__factory.d.ts.map
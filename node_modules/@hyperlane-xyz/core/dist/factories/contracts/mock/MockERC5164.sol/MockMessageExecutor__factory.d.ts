import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockMessageExecutor, MockMessageExecutorInterface } from "../../../../contracts/mock/MockERC5164.sol/MockMessageExecutor.js";
type MockMessageExecutorConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockMessageExecutor__factory extends ContractFactory {
    constructor(...args: MockMessageExecutorConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string;
    }): Promise<MockMessageExecutor>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): MockMessageExecutor;
    connect(signer: Signer): MockMessageExecutor__factory;
    static readonly bytecode = "0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea264697066735822122014c647bbbb7a5abdfcf731d72c310a44a1494730d726af45f97f95adf1417c7b64736f6c63430008130033";
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "fromChainId";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "messageId";
            readonly type: "bytes32";
        }];
        readonly name: "MessageIdExecuted";
        readonly type: "event";
    }];
    static createInterface(): MockMessageExecutorInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MockMessageExecutor;
}
export {};
//# sourceMappingURL=MockMessageExecutor__factory.d.ts.map
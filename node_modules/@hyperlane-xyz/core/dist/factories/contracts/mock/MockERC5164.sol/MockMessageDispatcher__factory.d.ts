import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockMessageDispatcher, MockMessageDispatcherInterface } from "../../../../contracts/mock/MockERC5164.sol/MockMessageDispatcher.js";
type MockMessageDispatcherConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockMessageDispatcher__factory extends ContractFactory {
    constructor(...args: MockMessageDispatcherConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string;
    }): Promise<MockMessageDispatcher>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): MockMessageDispatcher;
    connect(signer: Signer): MockMessageDispatcher__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b5061026c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063fe39827b14610030575b600080fd5b61004361003e3660046100e4565b610055565b60405190815260200160405180910390f35b6000808585858560405160200161006f9493929190610186565b604051602081830303815290604052805190602001209050853373ffffffffffffffffffffffffffffffffffffffff16827fe2f8f20ddbedfce5eb59a8b930077e7f4906a01300b9318db5f90d1c96c7b6d48888886040516100d3939291906101cc565b60405180910390a495945050505050565b600080600080606085870312156100fa57600080fd5b84359350602085013573ffffffffffffffffffffffffffffffffffffffff8116811461012557600080fd5b9250604085013567ffffffffffffffff8082111561014257600080fd5b818701915087601f83011261015657600080fd5b81358181111561016557600080fd5b88602082850101111561017757600080fd5b95989497505060200194505050565b8481527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008460601b16602082015281836034830137600091016034019081529392505050565b73ffffffffffffffffffffffffffffffffffffffff8416815260406020820152816040820152818360608301376000818301606090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe01601019291505056fea26469706673582212208b03c4dfb5088246dc769a67b4be2b506a33bb581e12e36e5e8491d44729136864736f6c63430008130033";
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "bytes32";
            readonly name: "messageId";
            readonly type: "bytes32";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "from";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "toChainId";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "MessageDispatched";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "toChainId";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "dispatchMessage";
        readonly outputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): MockMessageDispatcherInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MockMessageDispatcher;
}
export {};
//# sourceMappingURL=MockMessageDispatcher__factory.d.ts.map
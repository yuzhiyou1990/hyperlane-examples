import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockCircleTokenMessenger, MockCircleTokenMessengerInterface } from "../../../contracts/mock/MockCircleTokenMessenger.js";
type MockCircleTokenMessengerConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockCircleTokenMessenger__factory extends ContractFactory {
    constructor(...args: MockCircleTokenMessengerConstructorParams);
    deploy(_token: string, overrides?: Overrides & {
        from?: string;
    }): Promise<MockCircleTokenMessenger>;
    getDeployTransaction(_token: string, overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): MockCircleTokenMessenger;
    connect(signer: Signer): MockCircleTokenMessenger__factory;
    static readonly bytecode = "0x6080604052600080546001600160401b031916905534801561002057600080fd5b506040516104f33803806104f383398101604081905261003f91610073565b600080546001600160a01b039092166801000000000000000002600160401b600160e01b03199092169190911790556100a3565b60006020828403121561008557600080fd5b81516001600160a01b038116811461009c57600080fd5b9392505050565b610441806100b26000396000f3fe608060405234801561001057600080fd5b50600436106100415760003560e01c80636fd3504e14610046578063d69c3d3014610076578063f856ddb61461008a575b600080fd5b6100596100543660046102ff565b61009d565b60405167ffffffffffffffff909116815260200160405180910390f35b6000546100599067ffffffffffffffff1681565b610059610098366004610345565b610267565b600080546100b69067ffffffffffffffff166001610393565b600080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff929092169182179081905590915073ffffffffffffffffffffffffffffffffffffffff83811668010000000000000000909204161461012357600080fd5b6000546040517f23b872dd000000000000000000000000000000000000000000000000000000008152336004820152306024820152604481018790526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff16906323b872dd906064016020604051808303816000875af11580156101ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906101cf91906103e2565b506000546040517f42966c68000000000000000000000000000000000000000000000000000000008152600481018790526801000000000000000090910473ffffffffffffffffffffffffffffffffffffffff16906342966c6890602401600060405180830381600087803b15801561024757600080fd5b505af115801561025b573d6000803e3d6000fd5b50505050949350505050565b600080546102809067ffffffffffffffff166001610393565b600080547fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000001667ffffffffffffffff9290921691821790559695505050505050565b803563ffffffff811681146102d657600080fd5b919050565b803573ffffffffffffffffffffffffffffffffffffffff811681146102d657600080fd5b6000806000806080858703121561031557600080fd5b84359350610325602086016102c2565b92506040850135915061033a606086016102db565b905092959194509250565b600080600080600060a0868803121561035d57600080fd5b8535945061036d602087016102c2565b935060408601359250610382606087016102db565b949793965091946080013592915050565b67ffffffffffffffff8181168382160190808211156103db577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5092915050565b6000602082840312156103f457600080fd5b8151801515811461040457600080fd5b939250505056fea2646970667358221220a20486a888f1e8dbede89ae1efd9c9714720d2ad9b3e89977b51b49699b662df64736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "contract MockToken";
            readonly name: "_token";
            readonly type: "address";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "message";
            readonly type: "bytes";
        }];
        readonly name: "MessageSent";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "_amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "_burnToken";
            readonly type: "address";
        }];
        readonly name: "depositForBurn";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint32";
            readonly name: "";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "bytes32";
            readonly name: "";
            readonly type: "bytes32";
        }];
        readonly name: "depositForBurnWithCaller";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "_nonce";
            readonly type: "uint64";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "nextNonce";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "";
            readonly type: "uint64";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): MockCircleTokenMessengerInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MockCircleTokenMessenger;
}
export {};
//# sourceMappingURL=MockCircleTokenMessenger__factory.d.ts.map
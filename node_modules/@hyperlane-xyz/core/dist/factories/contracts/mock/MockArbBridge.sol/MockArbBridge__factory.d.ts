import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockArbBridge, MockArbBridgeInterface } from "../../../../contracts/mock/MockArbBridge.sol/MockArbBridge.js";
type MockArbBridgeConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockArbBridge__factory extends ContractFactory {
    constructor(...args: MockArbBridgeConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string;
    }): Promise<MockArbBridge>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): MockArbBridge;
    connect(signer: Signer): MockArbBridge__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50600080546001600160a01b03191630179055610403806100326000396000f3fe60806040526004361061005a5760003560e01c806380648b021161004357806380648b02146100d6578063ab5d89431461012c578063e78cea921461015957600080fd5b806308635a951461005f57806311b383ac14610074575b600080fd5b61007261006d3660046102a6565b61016c565b005b34801561008057600080fd5b5061007261008f36600461039b565b600180547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3480156100e257600080fd5b506001546101039073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200160405180910390f35b34801561013857600080fd5b506000546101039073ffffffffffffffffffffffffffffffffffffffff1681565b34801561016557600080fd5b5030610103565b6000808873ffffffffffffffffffffffffffffffffffffffff168585856040516101979291906103bd565b60006040518083038185875af1925050503d80600081146101d4576040519150601f19603f3d011682016040523d82523d6000602084013e6101d9565b606091505b509150915081610225578051156101f35780518082602001fd5b6040517f376fb55a00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50505050505050505050505050565b803573ffffffffffffffffffffffffffffffffffffffff8116811461025857600080fd5b919050565b60008083601f84011261026f57600080fd5b50813567ffffffffffffffff81111561028757600080fd5b60208301915083602082850101111561029f57600080fd5b9250929050565b60008060008060008060008060008060006101208c8e0312156102c857600080fd5b8b3567ffffffffffffffff808211156102e057600080fd5b818e0191508e601f8301126102f457600080fd5b81358181111561030357600080fd5b8f60208260051b850101111561031857600080fd5b60208381019e50909c508e01359a5061033360408f01610234565b995061034160608f01610234565b985060808e0135975060a08e0135965060c08e0135955060e08e013594506101008e013591508082111561037457600080fd5b506103818e828f0161025d565b915080935050809150509295989b509295989b9093969950565b6000602082840312156103ad57600080fd5b6103b682610234565b9392505050565b818382376000910190815291905056fea26469706673582212205833a5e4f1726e8015de7e703273cb891db7f9448ae2319898b00863ebba77be64736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "constructor";
    }, {
        readonly inputs: readonly [];
        readonly name: "BridgeCallFailed";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "activeOutbox";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "bridge";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32[]";
            readonly name: "";
            readonly type: "bytes32[]";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }, {
            readonly internalType: "address";
            readonly name: "to";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint256";
            readonly name: "value";
            readonly type: "uint256";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "executeTransaction";
        readonly outputs: readonly [];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [];
        readonly name: "l2ToL1Sender";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "_sender";
            readonly type: "address";
        }];
        readonly name: "setL2ToL1Sender";
        readonly outputs: readonly [];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }];
    static createInterface(): MockArbBridgeInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MockArbBridge;
}
export {};
//# sourceMappingURL=MockArbBridge__factory.d.ts.map
import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { MockArbSys, MockArbSysInterface } from "../../../../contracts/mock/MockArbBridge.sol/MockArbSys.js";
type MockArbSysConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class MockArbSys__factory extends ContractFactory {
    constructor(...args: MockArbSysConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string;
    }): Promise<MockArbSys>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): MockArbSys;
    connect(signer: Signer): MockArbSys__factory;
    static readonly bytecode = "0x608060405234801561001057600080fd5b50610281806100206000396000f3fe60806040526004361061001e5760003560e01c8063928c169a14610023575b600080fd5b6100366100313660046100d3565b610048565b60405190815260200160405180910390f35b6000602a838360405161005c929190610171565b60405190819003902073ffffffffffffffffffffffffffffffffffffffff86167f3e7aafa77dbf186b7fd488006beff893744caa3c4f6f299e8a709fa2087374fc336100a943600a610181565b4342348b8b6040516100c197969594939291906101c5565b60405180910390a45060009392505050565b6000806000604084860312156100e857600080fd5b833573ffffffffffffffffffffffffffffffffffffffff8116811461010c57600080fd5b9250602084013567ffffffffffffffff8082111561012957600080fd5b818601915086601f83011261013d57600080fd5b81358181111561014c57600080fd5b87602082850101111561015e57600080fd5b6020830194508093505050509250925092565b8183823760009101908152919050565b80820281158282048414176101bf577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b92915050565b73ffffffffffffffffffffffffffffffffffffffff8816815286602082015285604082015284606082015283608082015260c060a08201528160c0820152818360e0830137600081830160e090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101969550505050505056fea26469706673582212206911dc38047987feebc2e2a56cd046899ef0475a11feafd5118dc13ae1dbd79264736f6c63430008130033";
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "caller";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "destination";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "hash";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "position";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "arbBlockNum";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "ethBlockNum";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "timestamp";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "callvalue";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "L2ToL1Tx";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "destination";
            readonly type: "address";
        }, {
            readonly internalType: "bytes";
            readonly name: "data";
            readonly type: "bytes";
        }];
        readonly name: "sendTxToL1";
        readonly outputs: readonly [{
            readonly internalType: "uint256";
            readonly name: "";
            readonly type: "uint256";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }];
    static createInterface(): MockArbSysInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): MockArbSys;
}
export {};
//# sourceMappingURL=MockArbSys__factory.d.ts.map
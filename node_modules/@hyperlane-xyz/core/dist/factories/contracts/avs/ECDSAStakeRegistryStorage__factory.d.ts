import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { ECDSAStakeRegistryStorage, ECDSAStakeRegistryStorageInterface } from "../../../contracts/avs/ECDSAStakeRegistryStorage.js";
export declare class ECDSAStakeRegistryStorage__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "InsufficientSignedStake";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InsufficientWeight";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidLength";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidQuorum";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidReferenceBlock";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidSignature";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidSignedWeight";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "InvalidThreshold";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "LengthMismatch";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "MustUpdateAllOperators";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "NotSorted";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OperatorAlreadyRegistered";
        readonly type: "error";
    }, {
        readonly inputs: readonly [];
        readonly name: "OperatorNotRegistered";
        readonly type: "error";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_old";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_new";
            readonly type: "uint256";
        }];
        readonly name: "MinimumWeightUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_operator";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_avs";
            readonly type: "address";
        }];
        readonly name: "OperatorDeregistered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_operator";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_avs";
            readonly type: "address";
        }];
        readonly name: "OperatorRegistered";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "_operator";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "oldWeight";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newWeight";
            readonly type: "uint256";
        }];
        readonly name: "OperatorWeightUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "contract IStrategy";
                    readonly name: "strategy";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint96";
                    readonly name: "multiplier";
                    readonly type: "uint96";
                }];
                readonly internalType: "struct StrategyParams[]";
                readonly name: "strategies";
                readonly type: "tuple[]";
            }];
            readonly indexed: false;
            readonly internalType: "struct Quorum";
            readonly name: "_old";
            readonly type: "tuple";
        }, {
            readonly components: readonly [{
                readonly components: readonly [{
                    readonly internalType: "contract IStrategy";
                    readonly name: "strategy";
                    readonly type: "address";
                }, {
                    readonly internalType: "uint96";
                    readonly name: "multiplier";
                    readonly type: "uint96";
                }];
                readonly internalType: "struct StrategyParams[]";
                readonly name: "strategies";
                readonly type: "tuple[]";
            }];
            readonly indexed: false;
            readonly internalType: "struct Quorum";
            readonly name: "_new";
            readonly type: "tuple";
        }];
        readonly name: "QuorumUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "operator";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "uint256";
            readonly name: "updateBlock";
            readonly type: "uint256";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newSigningKey";
            readonly type: "address";
        }, {
            readonly indexed: false;
            readonly internalType: "address";
            readonly name: "oldSigningKey";
            readonly type: "address";
        }];
        readonly name: "SigningKeyUpdate";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "_thresholdWeight";
            readonly type: "uint256";
        }];
        readonly name: "ThresholdWeightUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "oldTotalWeight";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newTotalWeight";
            readonly type: "uint256";
        }];
        readonly name: "TotalWeightUpdated";
        readonly type: "event";
    }, {
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "oldMinimumWeight";
            readonly type: "uint256";
        }, {
            readonly indexed: false;
            readonly internalType: "uint256";
            readonly name: "newMinimumWeight";
            readonly type: "uint256";
        }];
        readonly name: "UpdateMinimumWeight";
        readonly type: "event";
    }];
    static createInterface(): ECDSAStakeRegistryStorageInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ECDSAStakeRegistryStorage;
}
//# sourceMappingURL=ECDSAStakeRegistryStorage__factory.d.ts.map
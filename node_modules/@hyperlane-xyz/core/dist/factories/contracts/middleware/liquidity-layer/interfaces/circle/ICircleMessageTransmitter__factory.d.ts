import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { ICircleMessageTransmitter, ICircleMessageTransmitterInterface } from "../../../../../../contracts/middleware/liquidity-layer/interfaces/circle/ICircleMessageTransmitter.js";
export declare class ICircleMessageTransmitter__factory {
    static readonly abi: readonly [{
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "_message";
            readonly type: "bytes";
        }, {
            readonly internalType: "bytes";
            readonly name: "_attestation";
            readonly type: "bytes";
        }];
        readonly name: "receiveMessage";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "success";
            readonly type: "bool";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes32";
            readonly name: "_nonceId";
            readonly type: "bytes32";
        }];
        readonly name: "usedNonces";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): ICircleMessageTransmitterInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): ICircleMessageTransmitter;
}
//# sourceMappingURL=ICircleMessageTransmitter__factory.d.ts.map
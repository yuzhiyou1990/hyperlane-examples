import { Signer } from "ethers";
import type { Provider } from "@ethersproject/providers";
import type { IPortalTokenBridge, IPortalTokenBridgeInterface } from "../../../../../../contracts/middleware/liquidity-layer/interfaces/portal/IPortalTokenBridge.js";
export declare class IPortalTokenBridge__factory {
    static readonly abi: readonly [{
        readonly anonymous: false;
        readonly inputs: readonly [{
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "oldContract";
            readonly type: "address";
        }, {
            readonly indexed: true;
            readonly internalType: "address";
            readonly name: "newContract";
            readonly type: "address";
        }];
        readonly name: "ContractUpgraded";
        readonly type: "event";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "encodedVm";
            readonly type: "bytes";
        }];
        readonly name: "completeTransferWithPayload";
        readonly outputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "";
            readonly type: "bytes";
        }];
        readonly stateMutability: "nonpayable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }];
        readonly name: "isWrappedAsset";
        readonly outputs: readonly [{
            readonly internalType: "bool";
            readonly name: "";
            readonly type: "bool";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "bytes";
            readonly name: "encoded";
            readonly type: "bytes";
        }];
        readonly name: "parseTransferWithPayload";
        readonly outputs: readonly [{
            readonly components: readonly [{
                readonly internalType: "uint8";
                readonly name: "payloadID";
                readonly type: "uint8";
            }, {
                readonly internalType: "uint256";
                readonly name: "amount";
                readonly type: "uint256";
            }, {
                readonly internalType: "bytes32";
                readonly name: "tokenAddress";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint16";
                readonly name: "tokenChain";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes32";
                readonly name: "to";
                readonly type: "bytes32";
            }, {
                readonly internalType: "uint16";
                readonly name: "toChain";
                readonly type: "uint16";
            }, {
                readonly internalType: "bytes32";
                readonly name: "fromAddress";
                readonly type: "bytes32";
            }, {
                readonly internalType: "bytes";
                readonly name: "payload";
                readonly type: "bytes";
            }];
            readonly internalType: "struct IPortalTokenBridge.TransferWithPayload";
            readonly name: "transfer";
            readonly type: "tuple";
        }];
        readonly stateMutability: "pure";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "address";
            readonly name: "token";
            readonly type: "address";
        }, {
            readonly internalType: "uint256";
            readonly name: "amount";
            readonly type: "uint256";
        }, {
            readonly internalType: "uint16";
            readonly name: "recipientChain";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes32";
            readonly name: "recipient";
            readonly type: "bytes32";
        }, {
            readonly internalType: "uint32";
            readonly name: "nonce";
            readonly type: "uint32";
        }, {
            readonly internalType: "bytes";
            readonly name: "payload";
            readonly type: "bytes";
        }];
        readonly name: "transferTokensWithPayload";
        readonly outputs: readonly [{
            readonly internalType: "uint64";
            readonly name: "sequence";
            readonly type: "uint64";
        }];
        readonly stateMutability: "payable";
        readonly type: "function";
    }, {
        readonly inputs: readonly [{
            readonly internalType: "uint16";
            readonly name: "tokenChainId";
            readonly type: "uint16";
        }, {
            readonly internalType: "bytes32";
            readonly name: "tokenAddress";
            readonly type: "bytes32";
        }];
        readonly name: "wrappedAsset";
        readonly outputs: readonly [{
            readonly internalType: "address";
            readonly name: "";
            readonly type: "address";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): IPortalTokenBridgeInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): IPortalTokenBridge;
}
//# sourceMappingURL=IPortalTokenBridge__factory.d.ts.map
import { Signer, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Versioned, VersionedInterface } from "../../../contracts/upgrade/Versioned.js";
type VersionedConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;
export declare class Versioned__factory extends ContractFactory {
    constructor(...args: VersionedConstructorParams);
    deploy(overrides?: Overrides & {
        from?: string;
    }): Promise<Versioned>;
    getDeployTransaction(overrides?: Overrides & {
        from?: string;
    }): TransactionRequest;
    attach(address: string): Versioned;
    connect(signer: Signer): Versioned__factory;
    static readonly bytecode = "0x6080604052348015600f57600080fd5b5060808061001e6000396000f3fe6080604052348015600f57600080fd5b506004361060285760003560e01c8063ffa1ad7414602d575b600080fd5b6034600381565b60405160ff909116815260200160405180910390f3fea2646970667358221220d7b63e36b03cf3d35c0d88a8e021688c2a651d46b0915f0b92519ec1af8e9e8064736f6c63430008130033";
    static readonly abi: readonly [{
        readonly inputs: readonly [];
        readonly name: "VERSION";
        readonly outputs: readonly [{
            readonly internalType: "uint8";
            readonly name: "";
            readonly type: "uint8";
        }];
        readonly stateMutability: "view";
        readonly type: "function";
    }];
    static createInterface(): VersionedInterface;
    static connect(address: string, signerOrProvider: Signer | Provider): Versioned;
}
export {};
//# sourceMappingURL=Versioned__factory.d.ts.map
import { providers } from 'ethers';
import { ProtocolType } from '@hyperlane-xyz/utils';
import { ChainMetadata, RpcUrl } from '../metadata/chainMetadataTypes.js';
import { CosmJsProvider, CosmJsWasmProvider, EthersV5Provider, ProviderType, SolanaWeb3Provider, TypedProvider, ViemProvider } from './ProviderType.js';
import { ProviderRetryOptions } from './SmartProvider/types.js';
export type ProviderBuilderFn<P> = (rpcUrls: ChainMetadata['rpcUrls'], network: number | string, retryOverride?: ProviderRetryOptions) => P;
export type TypedProviderBuilderFn = ProviderBuilderFn<TypedProvider>;
export declare function defaultEthersV5ProviderBuilder(rpcUrls: RpcUrl[], network: number | string, retryOverride?: ProviderRetryOptions): EthersV5Provider;
export declare function defaultViemProviderBuilder(rpcUrls: RpcUrl[], network: number | string): ViemProvider;
export declare function defaultSolProviderBuilder(rpcUrls: RpcUrl[], _network: number | string): SolanaWeb3Provider;
export declare function defaultFuelProviderBuilder(rpcUrls: RpcUrl[], _network: number | string): EthersV5Provider;
export declare function defaultCosmJsProviderBuilder(rpcUrls: RpcUrl[], _network: number | string): CosmJsProvider;
export declare function defaultCosmJsWasmProviderBuilder(rpcUrls: RpcUrl[], _network: number | string): CosmJsWasmProvider;
export declare function defaultProviderBuilder(rpcUrls: RpcUrl[], _network: number | string): providers.Provider;
export type ProviderBuilderMap = Record<ProviderType, ProviderBuilderFn<TypedProvider>>;
export declare const defaultProviderBuilderMap: ProviderBuilderMap;
export declare const protocolToDefaultProviderBuilder: Record<ProtocolType, ProviderBuilderFn<TypedProvider>>;
//# sourceMappingURL=providerBuilders.d.ts.map
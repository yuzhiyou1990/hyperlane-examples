import { expect } from 'chai';
import { EV5InterchainAccountTxTransformerPropsSchema } from './schemas.js';
describe('ethersV5 transformer props schemas', () => {
    const CHAIN_MOCK = 'ethereum';
    const ORIGIN_MOCK = 'arbitrum';
    const ADDRESS_MOCK = '0x1234567890123456789012345678901234567890';
    const HOOK_METADATA_MOCK = '1243';
    describe('EV5InterchainAccountTxTransformerProps', () => {
        it('should parse valid props', () => {
            const validProps = {
                chain: CHAIN_MOCK,
                config: {
                    origin: ORIGIN_MOCK,
                    owner: ADDRESS_MOCK,
                },
                hookMetadata: HOOK_METADATA_MOCK,
            };
            const result = EV5InterchainAccountTxTransformerPropsSchema.safeParse(validProps);
            expect(result.success).to.be.true;
        });
        it('should fail parsing props when required fields are missing', () => {
            const invalidProps = {
                chain: CHAIN_MOCK,
            };
            const result = EV5InterchainAccountTxTransformerPropsSchema.safeParse(invalidProps);
            expect(result.success).to.be.false;
        });
        it('should parse props when extra fields are present', () => {
            const validProps = {
                chain: CHAIN_MOCK,
                config: {
                    origin: ORIGIN_MOCK,
                    owner: ADDRESS_MOCK,
                },
                miscData: 1234,
                nonsense: 'bleh',
                ish: true,
            };
            const result = EV5InterchainAccountTxTransformerPropsSchema.safeParse(validProps);
            expect(result.success).to.be.true;
        });
    });
});
//# sourceMappingURL=schemas.test.js.map
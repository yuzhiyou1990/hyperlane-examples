import { z } from 'zod';
export declare const SubmissionStrategySchema: z.ZodObject<{
    submitter: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        chain: z.ZodString;
        type: z.ZodLiteral<import("../TxSubmitterTypes.js").TxSubmitterType.JSON_RPC>;
    }, "strip", z.ZodTypeAny, {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.JSON_RPC;
        chain: string;
    }, {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.JSON_RPC;
        chain: string;
    }>, z.ZodObject<{
        chain: z.ZodString;
        userAddress: z.ZodString;
        type: z.ZodLiteral<import("../TxSubmitterTypes.js").TxSubmitterType.IMPERSONATED_ACCOUNT>;
    }, "strip", z.ZodTypeAny, {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.IMPERSONATED_ACCOUNT;
        chain: string;
        userAddress: string;
    }, {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.IMPERSONATED_ACCOUNT;
        chain: string;
        userAddress: string;
    }>, z.ZodObject<{
        chain: z.ZodString;
        safeAddress: z.ZodString;
        type: z.ZodLiteral<import("../TxSubmitterTypes.js").TxSubmitterType.GNOSIS_SAFE>;
    }, "strip", z.ZodTypeAny, {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.GNOSIS_SAFE;
        chain: string;
        safeAddress: string;
    }, {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.GNOSIS_SAFE;
        chain: string;
        safeAddress: string;
    }>, z.ZodObject<{
        version: z.ZodDefault<z.ZodString>;
        chain: z.ZodString;
        safeAddress: z.ZodString;
        type: z.ZodLiteral<import("../TxSubmitterTypes.js").TxSubmitterType.GNOSIS_TX_BUILDER>;
    }, "strip", z.ZodTypeAny, {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.GNOSIS_TX_BUILDER;
        version: string;
        chain: string;
        safeAddress: string;
    }, {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.GNOSIS_TX_BUILDER;
        chain: string;
        safeAddress: string;
        version?: string | undefined;
    }>]>;
    transforms: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        chain: z.ZodString;
        config: z.ZodObject<{
            origin: z.ZodString;
            owner: z.ZodString;
            localRouter: z.ZodOptional<z.ZodString>;
            routerOverride: z.ZodOptional<z.ZodString>;
            ismOverride: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            owner: string;
            origin: string;
            localRouter?: string | undefined;
            routerOverride?: string | undefined;
            ismOverride?: string | undefined;
        }, {
            owner: string;
            origin: string;
            localRouter?: string | undefined;
            routerOverride?: string | undefined;
            ismOverride?: string | undefined;
        }>;
        hookMetadata: z.ZodOptional<z.ZodString>;
        type: z.ZodLiteral<import("../../transformer/TxTransformerTypes.js").TxTransformerType>;
    }, "strip", z.ZodTypeAny, {
        type: import("../../transformer/TxTransformerTypes.js").TxTransformerType;
        chain: string;
        config: {
            owner: string;
            origin: string;
            localRouter?: string | undefined;
            routerOverride?: string | undefined;
            ismOverride?: string | undefined;
        };
        hookMetadata?: string | undefined;
    }, {
        type: import("../../transformer/TxTransformerTypes.js").TxTransformerType;
        chain: string;
        config: {
            owner: string;
            origin: string;
            localRouter?: string | undefined;
            routerOverride?: string | undefined;
            ismOverride?: string | undefined;
        };
        hookMetadata?: string | undefined;
    }>]>, "many">>;
}, "strip", z.ZodTypeAny, {
    submitter: {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.JSON_RPC;
        chain: string;
    } | {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.IMPERSONATED_ACCOUNT;
        chain: string;
        userAddress: string;
    } | {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.GNOSIS_SAFE;
        chain: string;
        safeAddress: string;
    } | {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.GNOSIS_TX_BUILDER;
        version: string;
        chain: string;
        safeAddress: string;
    };
    transforms?: {
        type: import("../../transformer/TxTransformerTypes.js").TxTransformerType;
        chain: string;
        config: {
            owner: string;
            origin: string;
            localRouter?: string | undefined;
            routerOverride?: string | undefined;
            ismOverride?: string | undefined;
        };
        hookMetadata?: string | undefined;
    }[] | undefined;
}, {
    submitter: {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.JSON_RPC;
        chain: string;
    } | {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.IMPERSONATED_ACCOUNT;
        chain: string;
        userAddress: string;
    } | {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.GNOSIS_SAFE;
        chain: string;
        safeAddress: string;
    } | {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.GNOSIS_TX_BUILDER;
        chain: string;
        safeAddress: string;
        version?: string | undefined;
    };
    transforms?: {
        type: import("../../transformer/TxTransformerTypes.js").TxTransformerType;
        chain: string;
        config: {
            owner: string;
            origin: string;
            localRouter?: string | undefined;
            routerOverride?: string | undefined;
            ismOverride?: string | undefined;
        };
        hookMetadata?: string | undefined;
    }[] | undefined;
}>;
export declare const ChainSubmissionStrategySchema: z.ZodRecord<z.ZodString, z.ZodObject<{
    submitter: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        chain: z.ZodString;
        type: z.ZodLiteral<import("../TxSubmitterTypes.js").TxSubmitterType.JSON_RPC>;
    }, "strip", z.ZodTypeAny, {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.JSON_RPC;
        chain: string;
    }, {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.JSON_RPC;
        chain: string;
    }>, z.ZodObject<{
        chain: z.ZodString;
        userAddress: z.ZodString;
        type: z.ZodLiteral<import("../TxSubmitterTypes.js").TxSubmitterType.IMPERSONATED_ACCOUNT>;
    }, "strip", z.ZodTypeAny, {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.IMPERSONATED_ACCOUNT;
        chain: string;
        userAddress: string;
    }, {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.IMPERSONATED_ACCOUNT;
        chain: string;
        userAddress: string;
    }>, z.ZodObject<{
        chain: z.ZodString;
        safeAddress: z.ZodString;
        type: z.ZodLiteral<import("../TxSubmitterTypes.js").TxSubmitterType.GNOSIS_SAFE>;
    }, "strip", z.ZodTypeAny, {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.GNOSIS_SAFE;
        chain: string;
        safeAddress: string;
    }, {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.GNOSIS_SAFE;
        chain: string;
        safeAddress: string;
    }>, z.ZodObject<{
        version: z.ZodDefault<z.ZodString>;
        chain: z.ZodString;
        safeAddress: z.ZodString;
        type: z.ZodLiteral<import("../TxSubmitterTypes.js").TxSubmitterType.GNOSIS_TX_BUILDER>;
    }, "strip", z.ZodTypeAny, {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.GNOSIS_TX_BUILDER;
        version: string;
        chain: string;
        safeAddress: string;
    }, {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.GNOSIS_TX_BUILDER;
        chain: string;
        safeAddress: string;
        version?: string | undefined;
    }>]>;
    transforms: z.ZodOptional<z.ZodArray<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
        chain: z.ZodString;
        config: z.ZodObject<{
            origin: z.ZodString;
            owner: z.ZodString;
            localRouter: z.ZodOptional<z.ZodString>;
            routerOverride: z.ZodOptional<z.ZodString>;
            ismOverride: z.ZodOptional<z.ZodString>;
        }, "strip", z.ZodTypeAny, {
            owner: string;
            origin: string;
            localRouter?: string | undefined;
            routerOverride?: string | undefined;
            ismOverride?: string | undefined;
        }, {
            owner: string;
            origin: string;
            localRouter?: string | undefined;
            routerOverride?: string | undefined;
            ismOverride?: string | undefined;
        }>;
        hookMetadata: z.ZodOptional<z.ZodString>;
        type: z.ZodLiteral<import("../../transformer/TxTransformerTypes.js").TxTransformerType>;
    }, "strip", z.ZodTypeAny, {
        type: import("../../transformer/TxTransformerTypes.js").TxTransformerType;
        chain: string;
        config: {
            owner: string;
            origin: string;
            localRouter?: string | undefined;
            routerOverride?: string | undefined;
            ismOverride?: string | undefined;
        };
        hookMetadata?: string | undefined;
    }, {
        type: import("../../transformer/TxTransformerTypes.js").TxTransformerType;
        chain: string;
        config: {
            owner: string;
            origin: string;
            localRouter?: string | undefined;
            routerOverride?: string | undefined;
            ismOverride?: string | undefined;
        };
        hookMetadata?: string | undefined;
    }>]>, "many">>;
}, "strip", z.ZodTypeAny, {
    submitter: {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.JSON_RPC;
        chain: string;
    } | {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.IMPERSONATED_ACCOUNT;
        chain: string;
        userAddress: string;
    } | {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.GNOSIS_SAFE;
        chain: string;
        safeAddress: string;
    } | {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.GNOSIS_TX_BUILDER;
        version: string;
        chain: string;
        safeAddress: string;
    };
    transforms?: {
        type: import("../../transformer/TxTransformerTypes.js").TxTransformerType;
        chain: string;
        config: {
            owner: string;
            origin: string;
            localRouter?: string | undefined;
            routerOverride?: string | undefined;
            ismOverride?: string | undefined;
        };
        hookMetadata?: string | undefined;
    }[] | undefined;
}, {
    submitter: {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.JSON_RPC;
        chain: string;
    } | {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.IMPERSONATED_ACCOUNT;
        chain: string;
        userAddress: string;
    } | {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.GNOSIS_SAFE;
        chain: string;
        safeAddress: string;
    } | {
        type: import("../TxSubmitterTypes.js").TxSubmitterType.GNOSIS_TX_BUILDER;
        chain: string;
        safeAddress: string;
        version?: string | undefined;
    };
    transforms?: {
        type: import("../../transformer/TxTransformerTypes.js").TxTransformerType;
        chain: string;
        config: {
            owner: string;
            origin: string;
            localRouter?: string | undefined;
            routerOverride?: string | undefined;
            ismOverride?: string | undefined;
        };
        hookMetadata?: string | undefined;
    }[] | undefined;
}>>;
//# sourceMappingURL=schemas.d.ts.map
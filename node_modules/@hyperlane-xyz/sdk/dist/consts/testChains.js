import { ProtocolType } from '@hyperlane-xyz/utils';
import { ExplorerFamily, } from '../metadata/chainMetadataTypes.js';
export var TestChainName;
(function (TestChainName) {
    TestChainName["test1"] = "test1";
    TestChainName["test2"] = "test2";
    TestChainName["test3"] = "test3";
    TestChainName["test4"] = "test4";
})(TestChainName || (TestChainName = {}));
export const testChains = Object.values(TestChainName);
export const test1 = {
    blockExplorers: [
        {
            apiKey: 'fakekey',
            apiUrl: 'https://api.etherscan.io/api',
            family: ExplorerFamily.Etherscan,
            name: 'Etherscan',
            url: 'https://etherscan.io',
        },
    ],
    blocks: {
        confirmations: 1,
        estimateBlockTime: 3,
        reorgPeriod: 0,
    },
    chainId: 9913371,
    displayName: 'Test 1',
    domainId: 9913371,
    isTestnet: true,
    name: 'test1',
    nativeToken: { decimals: 18, name: 'Ether', symbol: 'ETH' },
    protocol: ProtocolType.Ethereum,
    rpcUrls: [{ http: 'http://127.0.0.1:8545' }],
};
export const test2 = {
    ...test1,
    blocks: {
        confirmations: 1,
        estimateBlockTime: 3,
        reorgPeriod: 1,
    },
    chainId: 9913372,
    displayName: 'Test 2',
    domainId: 9913372,
    name: 'test2',
};
export const test3 = {
    ...test1,
    blocks: {
        confirmations: 1,
        estimateBlockTime: 3,
        reorgPeriod: 2,
    },
    chainId: 9913373,
    displayName: 'Test 3',
    domainId: 9913373,
    name: 'test3',
};
export const test4 = {
    ...test1,
    chainId: 31337,
    displayName: 'Test 4',
    domainId: 31337,
    name: 'test4',
};
export const testChainMetadata = {
    test1,
    test2,
    test3,
    test4,
};
export const testCosmosChain = {
    bech32Prefix: 'testcosmos',
    blockExplorers: [
        {
            apiUrl: 'https://www.mintscan.io/cosmos',
            family: ExplorerFamily.Other,
            name: 'Mintscan',
            url: 'https://www.mintscan.io/cosmos',
        },
    ],
    chainId: 'testcosmos',
    domainId: 123456789,
    grpcUrls: [],
    name: 'testcosmos',
    nativeToken: { decimals: 6, denom: 'uatom', name: 'Atom', symbol: 'ATOM' },
    protocol: ProtocolType.Cosmos,
    restUrls: [],
    rpcUrls: [{ http: 'http://127.0.0.1:1317' }],
    slip44: 118,
};
export const testSealevelChain = {
    blockExplorers: [
        {
            apiUrl: 'https://explorer.solana.com?cluster=devnet',
            family: ExplorerFamily.Other,
            name: 'Solana Explorer',
            url: 'https://explorer.solana.com?cluster=devnet',
        },
    ],
    chainId: 987654321,
    domainId: 987654321,
    name: 'testsealevel',
    nativeToken: { decimals: 9, name: 'Sol', symbol: 'SOL' },
    protocol: ProtocolType.Sealevel,
    rpcUrls: [{ http: 'http://127.0.0.1:8899' }],
};
export const multiProtocolTestChainMetadata = {
    ...testChainMetadata,
    testcosmos: testCosmosChain,
    testsealevel: testSealevelChain,
};
export const multiProtocolTestChains = Object.keys(multiProtocolTestChainMetadata);
//# sourceMappingURL=testChains.js.map
import { DomainRoutingHook, OPStackHook, ProtocolFee } from '@hyperlane-xyz/core';
import { HyperlaneContracts } from '../contracts/types.js';
import { CoreAddresses } from '../core/contracts.js';
import { HyperlaneDeployer } from '../deploy/HyperlaneDeployer.js';
import { ContractVerifier } from '../deploy/verify/ContractVerifier.js';
import { HyperlaneIgpDeployer } from '../gas/HyperlaneIgpDeployer.js';
import { IgpFactories } from '../gas/contracts.js';
import { HyperlaneIsmFactory } from '../ism/HyperlaneIsmFactory.js';
import { MultiProvider } from '../providers/MultiProvider.js';
import { ChainMap, ChainName } from '../types.js';
import { HookFactories } from './contracts.js';
import { AggregationHookConfig, DomainRoutingHookConfig, FallbackRoutingHookConfig, HookConfig, IgpHookConfig, OpStackHookConfig, ProtocolFeeHookConfig } from './types.js';
export declare class HyperlaneHookDeployer extends HyperlaneDeployer<HookConfig, HookFactories> {
    readonly core: ChainMap<Partial<CoreAddresses>>;
    readonly ismFactory: HyperlaneIsmFactory;
    readonly igpDeployer: HyperlaneIgpDeployer;
    constructor(multiProvider: MultiProvider, core: ChainMap<Partial<CoreAddresses>>, ismFactory: HyperlaneIsmFactory, contractVerifier?: ContractVerifier, concurrentDeploy?: boolean, igpDeployer?: HyperlaneIgpDeployer);
    cacheAddressesMap(addressesMap: ChainMap<CoreAddresses>): void;
    deployContracts(chain: ChainName, config: HookConfig, coreAddresses?: Partial<import("../contracts/types.js").HyperlaneAddresses<{
        validatorAnnounce: import("@hyperlane-xyz/core").ValidatorAnnounce__factory;
        proxyAdmin: import("@hyperlane-xyz/core").ProxyAdmin__factory;
        mailbox: import("@hyperlane-xyz/core").Mailbox__factory;
    }>>): Promise<HyperlaneContracts<HookFactories>>;
    deployProtocolFee(chain: ChainName, config: ProtocolFeeHookConfig): Promise<ProtocolFee>;
    deployIgp(chain: ChainName, config: IgpHookConfig, coreAddresses?: Partial<import("../contracts/types.js").HyperlaneAddresses<{
        validatorAnnounce: import("@hyperlane-xyz/core").ValidatorAnnounce__factory;
        proxyAdmin: import("@hyperlane-xyz/core").ProxyAdmin__factory;
        mailbox: import("@hyperlane-xyz/core").Mailbox__factory;
    }>>): Promise<HyperlaneContracts<IgpFactories>>;
    deployAggregation(chain: ChainName, config: AggregationHookConfig, coreAddresses?: Partial<import("../contracts/types.js").HyperlaneAddresses<{
        validatorAnnounce: import("@hyperlane-xyz/core").ValidatorAnnounce__factory;
        proxyAdmin: import("@hyperlane-xyz/core").ProxyAdmin__factory;
        mailbox: import("@hyperlane-xyz/core").Mailbox__factory;
    }>>): Promise<HyperlaneContracts<HookFactories>>;
    deployOpStack(chain: ChainName, config: OpStackHookConfig, coreAddresses?: Partial<import("../contracts/types.js").HyperlaneAddresses<{
        validatorAnnounce: import("@hyperlane-xyz/core").ValidatorAnnounce__factory;
        proxyAdmin: import("@hyperlane-xyz/core").ProxyAdmin__factory;
        mailbox: import("@hyperlane-xyz/core").Mailbox__factory;
    }>>): Promise<OPStackHook>;
    deployRouting(chain: ChainName, config: DomainRoutingHookConfig | FallbackRoutingHookConfig, coreAddresses?: Partial<import("../contracts/types.js").HyperlaneAddresses<{
        validatorAnnounce: import("@hyperlane-xyz/core").ValidatorAnnounce__factory;
        proxyAdmin: import("@hyperlane-xyz/core").ProxyAdmin__factory;
        mailbox: import("@hyperlane-xyz/core").Mailbox__factory;
    }>>): Promise<DomainRoutingHook>;
}
//# sourceMappingURL=HyperlaneHookDeployer.d.ts.map
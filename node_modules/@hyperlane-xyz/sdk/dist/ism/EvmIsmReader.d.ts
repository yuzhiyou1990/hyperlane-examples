import { Address, WithAddress } from '@hyperlane-xyz/utils';
import { DispatchedMessage } from '../core/types.js';
import { MultiProvider } from '../providers/MultiProvider.js';
import { ChainNameOrId } from '../types.js';
import { HyperlaneReader } from '../utils/HyperlaneReader.js';
import { AggregationIsmConfig, ArbL2ToL1IsmConfig, IsmConfig, ModuleType, MultisigIsmConfig, NullIsmConfig, RoutingIsmConfig } from './types.js';
export type DerivedIsmConfig = WithAddress<Exclude<IsmConfig, Address>>;
export interface IsmReader {
    deriveIsmConfig(address: Address): Promise<DerivedIsmConfig>;
    deriveRoutingConfig(address: Address): Promise<WithAddress<RoutingIsmConfig>>;
    deriveAggregationConfig(address: Address): Promise<WithAddress<AggregationIsmConfig>>;
    deriveMultisigConfig(address: Address): Promise<WithAddress<MultisigIsmConfig>>;
    deriveNullConfig(address: Address): Promise<WithAddress<NullIsmConfig>>;
    deriveArbL2ToL1Config(address: Address): Promise<WithAddress<ArbL2ToL1IsmConfig>>;
    assertModuleType(moduleType: ModuleType, expectedModuleType: ModuleType): void;
}
export declare class EvmIsmReader extends HyperlaneReader implements IsmReader {
    protected readonly multiProvider: MultiProvider;
    protected readonly chain: ChainNameOrId;
    protected readonly concurrency: number;
    protected readonly messageContext?: DispatchedMessage | undefined;
    protected readonly logger: import("pino").default.Logger<never>;
    constructor(multiProvider: MultiProvider, chain: ChainNameOrId, concurrency?: number, messageContext?: DispatchedMessage | undefined);
    deriveIsmConfig(address: Address): Promise<DerivedIsmConfig>;
    deriveRoutingConfig(address: Address): Promise<WithAddress<RoutingIsmConfig>>;
    deriveAggregationConfig(address: Address): Promise<WithAddress<AggregationIsmConfig>>;
    deriveMultisigConfig(address: string): Promise<WithAddress<MultisigIsmConfig>>;
    deriveNullConfig(address: Address): Promise<WithAddress<NullIsmConfig>>;
    deriveArbL2ToL1Config(address: Address): Promise<WithAddress<ArbL2ToL1IsmConfig>>;
    assertModuleType(moduleType: ModuleType, expectedModuleType: ModuleType): void;
}
//# sourceMappingURL=EvmIsmReader.d.ts.map
import { BigNumber } from 'ethers';
import { ChainMetadataManager } from '../metadata/ChainMetadataManager.js';
import { AgentCosmosGasPrice } from '../metadata/agentConfig.js';
import { MultiProtocolProvider } from '../providers/MultiProtocolProvider.js';
import { ChainMap, ChainName } from '../types.js';
import { StorageGasOracleConfig } from './oracle/types.js';
export interface GasPriceConfig {
    amount: string;
    decimals: number;
}
export interface NativeTokenPriceConfig {
    price: string;
    decimals: number;
}
export interface ChainGasOracleParams {
    gasPrice: GasPriceConfig;
    nativeToken: NativeTokenPriceConfig;
}
export declare function getGasPrice(mpp: MultiProtocolProvider, chain: string): Promise<GasPriceConfig>;
export declare function getCosmosChainGasPrice(chain: ChainName, chainMetadataManager: ChainMetadataManager): Promise<AgentCosmosGasPrice>;
export declare function getTokenExchangeRateFromValues({ local, remote, tokenPrices, exchangeRateMarginPct, decimals, }: {
    local: ChainName;
    remote: ChainName;
    tokenPrices: ChainMap<string>;
    exchangeRateMarginPct: number;
    decimals: {
        local: number;
        remote: number;
    };
}): BigNumber;
export declare function getLocalStorageGasOracleConfig({ local, gasOracleParams, exchangeRateMarginPct, }: {
    local: ChainName;
    gasOracleParams: ChainMap<ChainGasOracleParams>;
    exchangeRateMarginPct: number;
}): ChainMap<StorageGasOracleConfig>;
//# sourceMappingURL=utils.d.ts.map
import { rootLogger } from '@hyperlane-xyz/utils';
import { serializeContracts } from '../contracts/contracts.js';
import { InterchainAccountDeployer } from '../middleware/account/InterchainAccountDeployer.js';
import { HyperlaneModule, } from './AbstractHyperlaneModule.js';
export class EvmIcaModule extends HyperlaneModule {
    multiProvider;
    logger = rootLogger.child({ module: 'EvmIcaModule' });
    constructor(multiProvider, args) {
        super(args);
        this.multiProvider = multiProvider;
    }
    async read() {
        throw new Error('Method not implemented.');
    }
    async update(_config) {
        throw new Error('Method not implemented.');
    }
    /**
     * Creates a new EvmIcaModule instance by deploying an ICA with an ICA ISM.
     *
     * @param chain - The chain on which to deploy the ICA.
     * @param config - The configuration for the ICA.
     * @param multiProvider - The MultiProvider instance to use for deployment.
     * @returns {Promise<EvmIcaModule>} - A new EvmIcaModule instance.
     */
    static async create({ chain, config, multiProvider, contractVerifier, }) {
        const interchainAccountDeployer = new InterchainAccountDeployer(multiProvider, contractVerifier);
        const deployedContracts = await interchainAccountDeployer.deployContracts(multiProvider.getChainName(chain), config);
        return new EvmIcaModule(multiProvider, {
            addresses: serializeContracts(deployedContracts),
            chain,
            config,
        });
    }
}
//# sourceMappingURL=EvmIcaModule.js.map
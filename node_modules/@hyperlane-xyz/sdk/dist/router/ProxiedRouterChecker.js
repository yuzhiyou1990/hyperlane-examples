import { HyperlaneRouterChecker } from './HyperlaneRouterChecker.js';
export class ProxiedRouterChecker extends HyperlaneRouterChecker {
    getOwnableOverrides(chain) {
        const config = this.configMap[chain];
        let ownableOverrides = config?.ownerOverrides;
        if (config?.timelock) {
            ownableOverrides = {
                ...ownableOverrides,
                proxyAdmin: this.app.getAddresses(chain).timelockController,
            };
        }
        return ownableOverrides;
    }
    async checkOwnership(chain) {
        return super.checkOwnership(chain, this.configMap[chain].owner, this.getOwnableOverrides(chain));
    }
    async checkProxiedContracts(chain) {
        return super.checkProxiedContracts(chain, this.configMap[chain].owner, this.getOwnableOverrides(chain));
    }
    async checkChain(chain) {
        await super.checkMailboxClient(chain);
        await super.checkEnrolledRouters(chain);
        await this.checkProxiedContracts(chain);
        await this.checkOwnership(chain);
    }
}
//# sourceMappingURL=ProxiedRouterChecker.js.map
import { z } from 'zod';
import { ProxyAdmin__factory, TimelockController__factory, } from '@hyperlane-xyz/core';
import { HookConfigSchema } from '../hook/types.js';
import { IsmConfigSchema } from '../ism/types.js';
import { ZHash } from '../metadata/customZodTypes.js';
import { DeployedOwnableSchema, OwnableSchema } from '../schemas.js';
export const proxiedFactories = {
    proxyAdmin: new ProxyAdmin__factory(),
    timelockController: new TimelockController__factory(),
};
export var ClientViolationType;
(function (ClientViolationType) {
    ClientViolationType["InterchainSecurityModule"] = "ClientIsm";
    ClientViolationType["Mailbox"] = "ClientMailbox";
    ClientViolationType["Hook"] = "ClientHook";
})(ClientViolationType || (ClientViolationType = {}));
export var RouterViolationType;
(function (RouterViolationType) {
    RouterViolationType["EnrolledRouter"] = "EnrolledRouter";
})(RouterViolationType || (RouterViolationType = {}));
export const MailboxClientConfigSchema = OwnableSchema.extend({
    mailbox: ZHash,
    hook: HookConfigSchema.optional(),
    interchainSecurityModule: IsmConfigSchema.optional(),
});
export const ForeignDeploymentConfigSchema = z.object({
    foreignDeployment: z.string().optional(),
});
const RemoteRouterDomain = z.string();
const RemoteRouterRouter = z.string().startsWith('0x');
export const RemoteRoutersSchema = z.record(RemoteRouterDomain, RemoteRouterRouter);
export const RouterConfigSchema = MailboxClientConfigSchema.merge(ForeignDeploymentConfigSchema).merge(z.object({
    remoteRouters: RemoteRoutersSchema.optional(),
    proxyAdmin: DeployedOwnableSchema.optional(),
}));
const DestinationGasDomain = z.string();
const DestinationGasAmount = z.string(); // This must be a string type to match Ether's type
export const DestinationGasSchema = z.record(DestinationGasDomain, DestinationGasAmount);
export const GasRouterConfigSchema = RouterConfigSchema.extend({
    gas: z.number().optional(),
    destinationGas: DestinationGasSchema.optional(),
});
//# sourceMappingURL=types.js.map
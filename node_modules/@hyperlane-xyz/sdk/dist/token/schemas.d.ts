import { z } from 'zod';
import { TokenType } from './config.js';
export declare const WarpRouteDeployConfigSchemaErrors: {
    ONLY_SYNTHETIC_REBASE: string;
    NO_SYNTHETIC_ONLY: string;
};
export declare const TokenMetadataSchema: z.ZodObject<{
    name: z.ZodString;
    symbol: z.ZodString;
    totalSupply: z.ZodUnion<[z.ZodString, z.ZodNumber]>;
    decimals: z.ZodOptional<z.ZodNumber>;
    scale: z.ZodOptional<z.ZodNumber>;
    isNft: z.ZodOptional<z.ZodBoolean>;
}, "strip", z.ZodTypeAny, {
    symbol: string;
    name: string;
    totalSupply: string | number;
    decimals?: number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}, {
    symbol: string;
    name: string;
    totalSupply: string | number;
    decimals?: number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}>;
export declare const CollateralConfigSchema: z.ZodObject<{
    symbol: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    decimals: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    totalSupply: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    scale: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    isNft: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    type: z.ZodEnum<[TokenType.collateral, TokenType.collateralVault, TokenType.collateralVaultRebase, TokenType.XERC20, TokenType.XERC20Lockbox, TokenType.collateralFiat, TokenType.fastCollateral, TokenType.collateralUri]>;
    token: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: TokenType.collateral | TokenType.collateralVault | TokenType.collateralVaultRebase | TokenType.XERC20 | TokenType.XERC20Lockbox | TokenType.collateralFiat | TokenType.fastCollateral | TokenType.collateralUri;
    token: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}, {
    type: TokenType.collateral | TokenType.collateralVault | TokenType.collateralVaultRebase | TokenType.XERC20 | TokenType.XERC20Lockbox | TokenType.collateralFiat | TokenType.fastCollateral | TokenType.collateralUri;
    token: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}>;
export declare const NativeConfigSchema: z.ZodObject<{
    symbol: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    decimals: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    totalSupply: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    scale: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    isNft: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    type: z.ZodEnum<[TokenType.native, TokenType.nativeScaled]>;
}, "strip", z.ZodTypeAny, {
    type: TokenType.native | TokenType.nativeScaled;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}, {
    type: TokenType.native | TokenType.nativeScaled;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}>;
export declare const CollateralRebaseConfigSchema: z.ZodObject<{
    symbol: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    decimals: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    scale: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    isNft: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    type: z.ZodLiteral<TokenType.collateralVaultRebase>;
}, "strip", z.ZodTypeAny, {
    type: TokenType.collateralVaultRebase;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}, {
    type: TokenType.collateralVaultRebase;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}>;
export declare const SyntheticRebaseConfigSchema: z.ZodObject<{
    symbol: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    decimals: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    totalSupply: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    scale: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    isNft: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    type: z.ZodLiteral<TokenType.syntheticRebase>;
    collateralChainName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: TokenType.syntheticRebase;
    collateralChainName: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}, {
    type: TokenType.syntheticRebase;
    collateralChainName: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}>;
export declare const SyntheticConfigSchema: z.ZodObject<{
    symbol: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    decimals: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    totalSupply: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    scale: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    isNft: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    type: z.ZodEnum<[TokenType.synthetic, TokenType.syntheticUri, TokenType.fastSynthetic]>;
}, "strip", z.ZodTypeAny, {
    type: TokenType.synthetic | TokenType.fastSynthetic | TokenType.syntheticUri;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}, {
    type: TokenType.synthetic | TokenType.fastSynthetic | TokenType.syntheticUri;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}>;
/**
 * @remarks
 * The discriminatedUnion is basically a switch statement for zod schemas
 * It uses the 'type' key to pick from the array of schemas to validate
 */
export declare const TokenConfigSchema: z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    symbol: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    decimals: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    totalSupply: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    scale: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    isNft: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    type: z.ZodEnum<[TokenType.native, TokenType.nativeScaled]>;
}, "strip", z.ZodTypeAny, {
    type: TokenType.native | TokenType.nativeScaled;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}, {
    type: TokenType.native | TokenType.nativeScaled;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}>, z.ZodObject<{
    symbol: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    decimals: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    totalSupply: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    scale: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    isNft: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    type: z.ZodEnum<[TokenType.collateral, TokenType.collateralVault, TokenType.collateralVaultRebase, TokenType.XERC20, TokenType.XERC20Lockbox, TokenType.collateralFiat, TokenType.fastCollateral, TokenType.collateralUri]>;
    token: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: TokenType.collateral | TokenType.collateralVault | TokenType.collateralVaultRebase | TokenType.XERC20 | TokenType.XERC20Lockbox | TokenType.collateralFiat | TokenType.fastCollateral | TokenType.collateralUri;
    token: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}, {
    type: TokenType.collateral | TokenType.collateralVault | TokenType.collateralVaultRebase | TokenType.XERC20 | TokenType.XERC20Lockbox | TokenType.collateralFiat | TokenType.fastCollateral | TokenType.collateralUri;
    token: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}>, z.ZodObject<{
    symbol: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    decimals: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    totalSupply: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    scale: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    isNft: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    type: z.ZodEnum<[TokenType.synthetic, TokenType.syntheticUri, TokenType.fastSynthetic]>;
}, "strip", z.ZodTypeAny, {
    type: TokenType.synthetic | TokenType.fastSynthetic | TokenType.syntheticUri;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}, {
    type: TokenType.synthetic | TokenType.fastSynthetic | TokenType.syntheticUri;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}>, z.ZodObject<{
    symbol: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    decimals: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    totalSupply: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    scale: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    isNft: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    type: z.ZodLiteral<TokenType.syntheticRebase>;
    collateralChainName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: TokenType.syntheticRebase;
    collateralChainName: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}, {
    type: TokenType.syntheticRebase;
    collateralChainName: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}>]>;
export type TokenConfig = z.infer<typeof TokenConfigSchema>;
export declare const TokenRouterConfigSchema: z.ZodIntersection<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    symbol: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    decimals: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    totalSupply: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    scale: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    isNft: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    type: z.ZodEnum<[TokenType.native, TokenType.nativeScaled]>;
}, "strip", z.ZodTypeAny, {
    type: TokenType.native | TokenType.nativeScaled;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}, {
    type: TokenType.native | TokenType.nativeScaled;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}>, z.ZodObject<{
    symbol: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    decimals: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    totalSupply: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    scale: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    isNft: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    type: z.ZodEnum<[TokenType.collateral, TokenType.collateralVault, TokenType.collateralVaultRebase, TokenType.XERC20, TokenType.XERC20Lockbox, TokenType.collateralFiat, TokenType.fastCollateral, TokenType.collateralUri]>;
    token: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: TokenType.collateral | TokenType.collateralVault | TokenType.collateralVaultRebase | TokenType.XERC20 | TokenType.XERC20Lockbox | TokenType.collateralFiat | TokenType.fastCollateral | TokenType.collateralUri;
    token: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}, {
    type: TokenType.collateral | TokenType.collateralVault | TokenType.collateralVaultRebase | TokenType.XERC20 | TokenType.XERC20Lockbox | TokenType.collateralFiat | TokenType.fastCollateral | TokenType.collateralUri;
    token: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}>, z.ZodObject<{
    symbol: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    decimals: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    totalSupply: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    scale: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    isNft: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    type: z.ZodEnum<[TokenType.synthetic, TokenType.syntheticUri, TokenType.fastSynthetic]>;
}, "strip", z.ZodTypeAny, {
    type: TokenType.synthetic | TokenType.fastSynthetic | TokenType.syntheticUri;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}, {
    type: TokenType.synthetic | TokenType.fastSynthetic | TokenType.syntheticUri;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}>, z.ZodObject<{
    symbol: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    decimals: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    totalSupply: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    scale: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    isNft: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    type: z.ZodLiteral<TokenType.syntheticRebase>;
    collateralChainName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: TokenType.syntheticRebase;
    collateralChainName: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}, {
    type: TokenType.syntheticRebase;
    collateralChainName: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}>]>, z.ZodObject<{
    owner: z.ZodString;
    ownerOverrides: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    mailbox: z.ZodString;
    proxyAdmin: z.ZodOptional<z.ZodObject<{
        owner: z.ZodString;
        ownerOverrides: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        address: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        owner: string;
        ownerOverrides?: Record<string, string> | undefined;
        address?: string | undefined;
    }, {
        owner: string;
        ownerOverrides?: Record<string, string> | undefined;
        address?: string | undefined;
    }>>;
    hook: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
        owner: z.ZodString;
        ownerOverrides: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        type: z.ZodLiteral<import("../index.js").HookType.PROTOCOL_FEE>;
        beneficiary: z.ZodString;
        maxProtocolFee: z.ZodString;
        protocolFee: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").HookType.PROTOCOL_FEE;
        owner: string;
        protocolFee: string;
        beneficiary: string;
        maxProtocolFee: string;
        ownerOverrides?: Record<string, string> | undefined;
    }, {
        type: import("../index.js").HookType.PROTOCOL_FEE;
        owner: string;
        protocolFee: string;
        beneficiary: string;
        maxProtocolFee: string;
        ownerOverrides?: Record<string, string> | undefined;
    }>, z.ZodObject<{
        owner: z.ZodString;
        ownerOverrides: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        paused: z.ZodBoolean;
        type: z.ZodLiteral<import("../index.js").HookType.PAUSABLE>;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").HookType.PAUSABLE;
        owner: string;
        paused: boolean;
        ownerOverrides?: Record<string, string> | undefined;
    }, {
        type: import("../index.js").HookType.PAUSABLE;
        owner: string;
        paused: boolean;
        ownerOverrides?: Record<string, string> | undefined;
    }>, z.ZodObject<{
        owner: z.ZodString;
        ownerOverrides: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        type: z.ZodLiteral<import("../index.js").HookType.OP_STACK>;
        nativeBridge: z.ZodString;
        destinationChain: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").HookType.OP_STACK;
        owner: string;
        nativeBridge: string;
        destinationChain: string;
        ownerOverrides?: Record<string, string> | undefined;
    }, {
        type: import("../index.js").HookType.OP_STACK;
        owner: string;
        nativeBridge: string;
        destinationChain: string;
        ownerOverrides?: Record<string, string> | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<import("../index.js").HookType.MERKLE_TREE>;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").HookType.MERKLE_TREE;
    }, {
        type: import("../index.js").HookType.MERKLE_TREE;
    }>, z.ZodObject<{
        owner: z.ZodString;
        ownerOverrides: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        type: z.ZodLiteral<import("../index.js").HookType.INTERCHAIN_GAS_PAYMASTER>;
        beneficiary: z.ZodString;
        oracleKey: z.ZodString;
        overhead: z.ZodRecord<z.ZodString, z.ZodNumber>;
        oracleConfig: z.ZodRecord<z.ZodString, z.ZodObject<{
            gasPrice: z.ZodString;
            tokenExchangeRate: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            gasPrice: string;
            tokenExchangeRate: string;
        }, {
            gasPrice: string;
            tokenExchangeRate: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").HookType.INTERCHAIN_GAS_PAYMASTER;
        owner: string;
        beneficiary: string;
        oracleKey: string;
        overhead: Record<string, number>;
        oracleConfig: Record<string, {
            gasPrice: string;
            tokenExchangeRate: string;
        }>;
        ownerOverrides?: Record<string, string> | undefined;
    }, {
        type: import("../index.js").HookType.INTERCHAIN_GAS_PAYMASTER;
        owner: string;
        beneficiary: string;
        oracleKey: string;
        overhead: Record<string, number>;
        oracleConfig: Record<string, {
            gasPrice: string;
            tokenExchangeRate: string;
        }>;
        ownerOverrides?: Record<string, string> | undefined;
    }>, z.ZodType<import("../index.js").DomainRoutingHookConfig, z.ZodTypeDef, import("../index.js").DomainRoutingHookConfig>, z.ZodType<import("../index.js").FallbackRoutingHookConfig, z.ZodTypeDef, import("../index.js").FallbackRoutingHookConfig>, z.ZodType<import("../index.js").AggregationHookConfig, z.ZodTypeDef, import("../index.js").AggregationHookConfig>, z.ZodObject<{
        type: z.ZodLiteral<import("../index.js").HookType.ARB_L2_TO_L1>;
        arbSys: z.ZodString;
        bridge: z.ZodOptional<z.ZodString>;
        destinationChain: z.ZodString;
        childHook: z.ZodLazy<z.ZodType<any, z.ZodTypeDef, any>>;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").HookType.ARB_L2_TO_L1;
        destinationChain: string;
        arbSys: string;
        bridge?: string | undefined;
        childHook?: any;
    }, {
        type: import("../index.js").HookType.ARB_L2_TO_L1;
        destinationChain: string;
        arbSys: string;
        bridge?: string | undefined;
        childHook?: any;
    }>]>>;
    interchainSecurityModule: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
        type: z.ZodLiteral<import("../index.js").IsmType.TEST_ISM>;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").IsmType.TEST_ISM;
    }, {
        type: import("../index.js").IsmType.TEST_ISM;
    }>, z.ZodObject<{
        type: z.ZodLiteral<import("../index.js").IsmType.OP_STACK>;
        origin: z.ZodString;
        nativeBridge: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").IsmType.OP_STACK;
        origin: string;
        nativeBridge: string;
    }, {
        type: import("../index.js").IsmType.OP_STACK;
        origin: string;
        nativeBridge: string;
    }>, z.ZodIntersection<z.ZodObject<{
        owner: z.ZodString;
        ownerOverrides: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        paused: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        owner: string;
        paused: boolean;
        ownerOverrides?: Record<string, string> | undefined;
    }, {
        owner: string;
        paused: boolean;
        ownerOverrides?: Record<string, string> | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<import("../index.js").IsmType.PAUSABLE>;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").IsmType.PAUSABLE;
    }, {
        type: import("../index.js").IsmType.PAUSABLE;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<import("../index.js").IsmType.TRUSTED_RELAYER>;
        relayer: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").IsmType.TRUSTED_RELAYER;
        relayer: string;
    }, {
        type: import("../index.js").IsmType.TRUSTED_RELAYER;
        relayer: string;
    }>, z.ZodIntersection<z.ZodObject<{
        validators: z.ZodArray<z.ZodString, "many">;
        threshold: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        validators: string[];
        threshold: number;
    }, {
        validators: string[];
        threshold: number;
    }>, z.ZodObject<{
        type: z.ZodUnion<[z.ZodLiteral<import("../index.js").IsmType.MERKLE_ROOT_MULTISIG>, z.ZodLiteral<import("../index.js").IsmType.MESSAGE_ID_MULTISIG>, z.ZodLiteral<import("../index.js").IsmType.STORAGE_MERKLE_ROOT_MULTISIG>, z.ZodLiteral<import("../index.js").IsmType.STORAGE_MESSAGE_ID_MULTISIG>]>;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").IsmType.MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.MESSAGE_ID_MULTISIG | import("../index.js").IsmType.STORAGE_MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.STORAGE_MESSAGE_ID_MULTISIG;
    }, {
        type: import("../index.js").IsmType.MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.MESSAGE_ID_MULTISIG | import("../index.js").IsmType.STORAGE_MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.STORAGE_MESSAGE_ID_MULTISIG;
    }>>, z.ZodIntersection<z.ZodObject<{
        validators: z.ZodArray<z.ZodObject<{
            signingAddress: z.ZodString;
            weight: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            signingAddress: string;
            weight: number;
        }, {
            signingAddress: string;
            weight: number;
        }>, "many">;
        thresholdWeight: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        validators: {
            signingAddress: string;
            weight: number;
        }[];
        thresholdWeight: number;
    }, {
        validators: {
            signingAddress: string;
            weight: number;
        }[];
        thresholdWeight: number;
    }>, z.ZodObject<{
        type: z.ZodUnion<[z.ZodLiteral<import("../index.js").IsmType.WEIGHTED_MERKLE_ROOT_MULTISIG>, z.ZodLiteral<import("../index.js").IsmType.WEIGHTED_MESSAGE_ID_MULTISIG>]>;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").IsmType.WEIGHTED_MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.WEIGHTED_MESSAGE_ID_MULTISIG;
    }, {
        type: import("../index.js").IsmType.WEIGHTED_MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.WEIGHTED_MESSAGE_ID_MULTISIG;
    }>>, z.ZodType<import("../index.js").RoutingIsmConfig, z.ZodTypeDef, import("../index.js").RoutingIsmConfig>, z.ZodType<import("../index.js").AggregationIsmConfig, z.ZodTypeDef, import("../index.js").AggregationIsmConfig>, z.ZodObject<{
        type: z.ZodLiteral<import("../index.js").IsmType.ARB_L2_TO_L1>;
        bridge: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").IsmType.ARB_L2_TO_L1;
        bridge: string;
    }, {
        type: import("../index.js").IsmType.ARB_L2_TO_L1;
        bridge: string;
    }>]>>;
    foreignDeployment: z.ZodOptional<z.ZodString>;
    remoteRouters: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    gas: z.ZodOptional<z.ZodNumber>;
    destinationGas: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    owner: string;
    mailbox: string;
    ownerOverrides?: Record<string, string> | undefined;
    proxyAdmin?: {
        owner: string;
        ownerOverrides?: Record<string, string> | undefined;
        address?: string | undefined;
    } | undefined;
    hook?: string | {
        type: import("../index.js").HookType.MERKLE_TREE;
    } | {
        type: import("../index.js").HookType.INTERCHAIN_GAS_PAYMASTER;
        owner: string;
        beneficiary: string;
        oracleKey: string;
        overhead: Record<string, number>;
        oracleConfig: Record<string, {
            gasPrice: string;
            tokenExchangeRate: string;
        }>;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.PROTOCOL_FEE;
        owner: string;
        protocolFee: string;
        beneficiary: string;
        maxProtocolFee: string;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.PAUSABLE;
        owner: string;
        paused: boolean;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.OP_STACK;
        owner: string;
        nativeBridge: string;
        destinationChain: string;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.ARB_L2_TO_L1;
        destinationChain: string;
        arbSys: string;
        bridge?: string | undefined;
        childHook?: any;
    } | import("../index.js").DomainRoutingHookConfig | import("../index.js").FallbackRoutingHookConfig | import("../index.js").AggregationHookConfig | undefined;
    interchainSecurityModule?: string | ({
        validators: string[];
        threshold: number;
    } & {
        type: import("../index.js").IsmType.MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.MESSAGE_ID_MULTISIG | import("../index.js").IsmType.STORAGE_MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.STORAGE_MESSAGE_ID_MULTISIG;
    }) | ({
        validators: {
            signingAddress: string;
            weight: number;
        }[];
        thresholdWeight: number;
    } & {
        type: import("../index.js").IsmType.WEIGHTED_MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.WEIGHTED_MESSAGE_ID_MULTISIG;
    }) | {
        type: import("../index.js").IsmType.TEST_ISM;
    } | ({
        owner: string;
        paused: boolean;
        ownerOverrides?: Record<string, string> | undefined;
    } & {
        type: import("../index.js").IsmType.PAUSABLE;
    }) | {
        type: import("../index.js").IsmType.OP_STACK;
        origin: string;
        nativeBridge: string;
    } | {
        type: import("../index.js").IsmType.TRUSTED_RELAYER;
        relayer: string;
    } | {
        type: import("../index.js").IsmType.ARB_L2_TO_L1;
        bridge: string;
    } | import("../index.js").RoutingIsmConfig | import("../index.js").AggregationIsmConfig | undefined;
    foreignDeployment?: string | undefined;
    remoteRouters?: Record<string, string> | undefined;
    gas?: number | undefined;
    destinationGas?: Record<string, string> | undefined;
}, {
    owner: string;
    mailbox: string;
    ownerOverrides?: Record<string, string> | undefined;
    proxyAdmin?: {
        owner: string;
        ownerOverrides?: Record<string, string> | undefined;
        address?: string | undefined;
    } | undefined;
    hook?: string | {
        type: import("../index.js").HookType.MERKLE_TREE;
    } | {
        type: import("../index.js").HookType.INTERCHAIN_GAS_PAYMASTER;
        owner: string;
        beneficiary: string;
        oracleKey: string;
        overhead: Record<string, number>;
        oracleConfig: Record<string, {
            gasPrice: string;
            tokenExchangeRate: string;
        }>;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.PROTOCOL_FEE;
        owner: string;
        protocolFee: string;
        beneficiary: string;
        maxProtocolFee: string;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.PAUSABLE;
        owner: string;
        paused: boolean;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.OP_STACK;
        owner: string;
        nativeBridge: string;
        destinationChain: string;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.ARB_L2_TO_L1;
        destinationChain: string;
        arbSys: string;
        bridge?: string | undefined;
        childHook?: any;
    } | import("../index.js").DomainRoutingHookConfig | import("../index.js").FallbackRoutingHookConfig | import("../index.js").AggregationHookConfig | undefined;
    interchainSecurityModule?: string | ({
        validators: string[];
        threshold: number;
    } & {
        type: import("../index.js").IsmType.MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.MESSAGE_ID_MULTISIG | import("../index.js").IsmType.STORAGE_MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.STORAGE_MESSAGE_ID_MULTISIG;
    }) | ({
        validators: {
            signingAddress: string;
            weight: number;
        }[];
        thresholdWeight: number;
    } & {
        type: import("../index.js").IsmType.WEIGHTED_MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.WEIGHTED_MESSAGE_ID_MULTISIG;
    }) | {
        type: import("../index.js").IsmType.TEST_ISM;
    } | ({
        owner: string;
        paused: boolean;
        ownerOverrides?: Record<string, string> | undefined;
    } & {
        type: import("../index.js").IsmType.PAUSABLE;
    }) | {
        type: import("../index.js").IsmType.OP_STACK;
        origin: string;
        nativeBridge: string;
    } | {
        type: import("../index.js").IsmType.TRUSTED_RELAYER;
        relayer: string;
    } | {
        type: import("../index.js").IsmType.ARB_L2_TO_L1;
        bridge: string;
    } | import("../index.js").RoutingIsmConfig | import("../index.js").AggregationIsmConfig | undefined;
    foreignDeployment?: string | undefined;
    remoteRouters?: Record<string, string> | undefined;
    gas?: number | undefined;
    destinationGas?: Record<string, string> | undefined;
}>>;
export type TokenRouterConfig = z.infer<typeof TokenRouterConfigSchema>;
export type NativeConfig = z.infer<typeof NativeConfigSchema>;
export type CollateralConfig = z.infer<typeof CollateralConfigSchema>;
export declare const isSyntheticConfig: (config: unknown) => config is {
    type: TokenType.synthetic | TokenType.fastSynthetic | TokenType.syntheticUri;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
};
export declare const isSyntheticRebaseConfig: (config: unknown) => config is {
    type: TokenType.syntheticRebase;
    collateralChainName: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
};
export declare const isCollateralRebaseConfig: (config: unknown) => config is {
    type: TokenType.collateralVaultRebase;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
};
export declare const isCollateralConfig: (config: unknown) => config is {
    type: TokenType.collateral | TokenType.collateralVault | TokenType.collateralVaultRebase | TokenType.XERC20 | TokenType.XERC20Lockbox | TokenType.collateralFiat | TokenType.fastCollateral | TokenType.collateralUri;
    token: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
};
export declare const isNativeConfig: (config: unknown) => config is {
    type: TokenType.native | TokenType.nativeScaled;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
};
export declare const isTokenMetadata: (config: unknown) => config is {
    symbol: string;
    name: string;
    totalSupply: string | number;
    decimals?: number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
};
export declare const WarpRouteDeployConfigSchema: z.ZodEffects<z.ZodEffects<z.ZodRecord<z.ZodString, z.ZodIntersection<z.ZodDiscriminatedUnion<"type", [z.ZodObject<{
    symbol: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    decimals: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    totalSupply: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    scale: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    isNft: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    type: z.ZodEnum<[TokenType.native, TokenType.nativeScaled]>;
}, "strip", z.ZodTypeAny, {
    type: TokenType.native | TokenType.nativeScaled;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}, {
    type: TokenType.native | TokenType.nativeScaled;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}>, z.ZodObject<{
    symbol: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    decimals: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    totalSupply: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    scale: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    isNft: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    type: z.ZodEnum<[TokenType.collateral, TokenType.collateralVault, TokenType.collateralVaultRebase, TokenType.XERC20, TokenType.XERC20Lockbox, TokenType.collateralFiat, TokenType.fastCollateral, TokenType.collateralUri]>;
    token: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: TokenType.collateral | TokenType.collateralVault | TokenType.collateralVaultRebase | TokenType.XERC20 | TokenType.XERC20Lockbox | TokenType.collateralFiat | TokenType.fastCollateral | TokenType.collateralUri;
    token: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}, {
    type: TokenType.collateral | TokenType.collateralVault | TokenType.collateralVaultRebase | TokenType.XERC20 | TokenType.XERC20Lockbox | TokenType.collateralFiat | TokenType.fastCollateral | TokenType.collateralUri;
    token: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}>, z.ZodObject<{
    symbol: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    decimals: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    totalSupply: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    scale: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    isNft: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    type: z.ZodEnum<[TokenType.synthetic, TokenType.syntheticUri, TokenType.fastSynthetic]>;
}, "strip", z.ZodTypeAny, {
    type: TokenType.synthetic | TokenType.fastSynthetic | TokenType.syntheticUri;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}, {
    type: TokenType.synthetic | TokenType.fastSynthetic | TokenType.syntheticUri;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}>, z.ZodObject<{
    symbol: z.ZodOptional<z.ZodString>;
    name: z.ZodOptional<z.ZodString>;
    decimals: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    totalSupply: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodNumber]>>;
    scale: z.ZodOptional<z.ZodOptional<z.ZodNumber>>;
    isNft: z.ZodOptional<z.ZodOptional<z.ZodBoolean>>;
    type: z.ZodLiteral<TokenType.syntheticRebase>;
    collateralChainName: z.ZodString;
}, "strip", z.ZodTypeAny, {
    type: TokenType.syntheticRebase;
    collateralChainName: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}, {
    type: TokenType.syntheticRebase;
    collateralChainName: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}>]>, z.ZodObject<{
    owner: z.ZodString;
    ownerOverrides: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    mailbox: z.ZodString;
    proxyAdmin: z.ZodOptional<z.ZodObject<{
        owner: z.ZodString;
        ownerOverrides: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        address: z.ZodOptional<z.ZodString>;
    }, "strip", z.ZodTypeAny, {
        owner: string;
        ownerOverrides?: Record<string, string> | undefined;
        address?: string | undefined;
    }, {
        owner: string;
        ownerOverrides?: Record<string, string> | undefined;
        address?: string | undefined;
    }>>;
    hook: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
        owner: z.ZodString;
        ownerOverrides: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        type: z.ZodLiteral<import("../index.js").HookType.PROTOCOL_FEE>;
        beneficiary: z.ZodString;
        maxProtocolFee: z.ZodString;
        protocolFee: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").HookType.PROTOCOL_FEE;
        owner: string;
        protocolFee: string;
        beneficiary: string;
        maxProtocolFee: string;
        ownerOverrides?: Record<string, string> | undefined;
    }, {
        type: import("../index.js").HookType.PROTOCOL_FEE;
        owner: string;
        protocolFee: string;
        beneficiary: string;
        maxProtocolFee: string;
        ownerOverrides?: Record<string, string> | undefined;
    }>, z.ZodObject<{
        owner: z.ZodString;
        ownerOverrides: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        paused: z.ZodBoolean;
        type: z.ZodLiteral<import("../index.js").HookType.PAUSABLE>;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").HookType.PAUSABLE;
        owner: string;
        paused: boolean;
        ownerOverrides?: Record<string, string> | undefined;
    }, {
        type: import("../index.js").HookType.PAUSABLE;
        owner: string;
        paused: boolean;
        ownerOverrides?: Record<string, string> | undefined;
    }>, z.ZodObject<{
        owner: z.ZodString;
        ownerOverrides: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        type: z.ZodLiteral<import("../index.js").HookType.OP_STACK>;
        nativeBridge: z.ZodString;
        destinationChain: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").HookType.OP_STACK;
        owner: string;
        nativeBridge: string;
        destinationChain: string;
        ownerOverrides?: Record<string, string> | undefined;
    }, {
        type: import("../index.js").HookType.OP_STACK;
        owner: string;
        nativeBridge: string;
        destinationChain: string;
        ownerOverrides?: Record<string, string> | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<import("../index.js").HookType.MERKLE_TREE>;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").HookType.MERKLE_TREE;
    }, {
        type: import("../index.js").HookType.MERKLE_TREE;
    }>, z.ZodObject<{
        owner: z.ZodString;
        ownerOverrides: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        type: z.ZodLiteral<import("../index.js").HookType.INTERCHAIN_GAS_PAYMASTER>;
        beneficiary: z.ZodString;
        oracleKey: z.ZodString;
        overhead: z.ZodRecord<z.ZodString, z.ZodNumber>;
        oracleConfig: z.ZodRecord<z.ZodString, z.ZodObject<{
            gasPrice: z.ZodString;
            tokenExchangeRate: z.ZodString;
        }, "strip", z.ZodTypeAny, {
            gasPrice: string;
            tokenExchangeRate: string;
        }, {
            gasPrice: string;
            tokenExchangeRate: string;
        }>>;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").HookType.INTERCHAIN_GAS_PAYMASTER;
        owner: string;
        beneficiary: string;
        oracleKey: string;
        overhead: Record<string, number>;
        oracleConfig: Record<string, {
            gasPrice: string;
            tokenExchangeRate: string;
        }>;
        ownerOverrides?: Record<string, string> | undefined;
    }, {
        type: import("../index.js").HookType.INTERCHAIN_GAS_PAYMASTER;
        owner: string;
        beneficiary: string;
        oracleKey: string;
        overhead: Record<string, number>;
        oracleConfig: Record<string, {
            gasPrice: string;
            tokenExchangeRate: string;
        }>;
        ownerOverrides?: Record<string, string> | undefined;
    }>, z.ZodType<import("../index.js").DomainRoutingHookConfig, z.ZodTypeDef, import("../index.js").DomainRoutingHookConfig>, z.ZodType<import("../index.js").FallbackRoutingHookConfig, z.ZodTypeDef, import("../index.js").FallbackRoutingHookConfig>, z.ZodType<import("../index.js").AggregationHookConfig, z.ZodTypeDef, import("../index.js").AggregationHookConfig>, z.ZodObject<{
        type: z.ZodLiteral<import("../index.js").HookType.ARB_L2_TO_L1>;
        arbSys: z.ZodString;
        bridge: z.ZodOptional<z.ZodString>;
        destinationChain: z.ZodString;
        childHook: z.ZodLazy<z.ZodType<any, z.ZodTypeDef, any>>;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").HookType.ARB_L2_TO_L1;
        destinationChain: string;
        arbSys: string;
        bridge?: string | undefined;
        childHook?: any;
    }, {
        type: import("../index.js").HookType.ARB_L2_TO_L1;
        destinationChain: string;
        arbSys: string;
        bridge?: string | undefined;
        childHook?: any;
    }>]>>;
    interchainSecurityModule: z.ZodOptional<z.ZodUnion<[z.ZodString, z.ZodObject<{
        type: z.ZodLiteral<import("../index.js").IsmType.TEST_ISM>;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").IsmType.TEST_ISM;
    }, {
        type: import("../index.js").IsmType.TEST_ISM;
    }>, z.ZodObject<{
        type: z.ZodLiteral<import("../index.js").IsmType.OP_STACK>;
        origin: z.ZodString;
        nativeBridge: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").IsmType.OP_STACK;
        origin: string;
        nativeBridge: string;
    }, {
        type: import("../index.js").IsmType.OP_STACK;
        origin: string;
        nativeBridge: string;
    }>, z.ZodIntersection<z.ZodObject<{
        owner: z.ZodString;
        ownerOverrides: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
        paused: z.ZodBoolean;
    }, "strip", z.ZodTypeAny, {
        owner: string;
        paused: boolean;
        ownerOverrides?: Record<string, string> | undefined;
    }, {
        owner: string;
        paused: boolean;
        ownerOverrides?: Record<string, string> | undefined;
    }>, z.ZodObject<{
        type: z.ZodLiteral<import("../index.js").IsmType.PAUSABLE>;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").IsmType.PAUSABLE;
    }, {
        type: import("../index.js").IsmType.PAUSABLE;
    }>>, z.ZodObject<{
        type: z.ZodLiteral<import("../index.js").IsmType.TRUSTED_RELAYER>;
        relayer: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").IsmType.TRUSTED_RELAYER;
        relayer: string;
    }, {
        type: import("../index.js").IsmType.TRUSTED_RELAYER;
        relayer: string;
    }>, z.ZodIntersection<z.ZodObject<{
        validators: z.ZodArray<z.ZodString, "many">;
        threshold: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        validators: string[];
        threshold: number;
    }, {
        validators: string[];
        threshold: number;
    }>, z.ZodObject<{
        type: z.ZodUnion<[z.ZodLiteral<import("../index.js").IsmType.MERKLE_ROOT_MULTISIG>, z.ZodLiteral<import("../index.js").IsmType.MESSAGE_ID_MULTISIG>, z.ZodLiteral<import("../index.js").IsmType.STORAGE_MERKLE_ROOT_MULTISIG>, z.ZodLiteral<import("../index.js").IsmType.STORAGE_MESSAGE_ID_MULTISIG>]>;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").IsmType.MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.MESSAGE_ID_MULTISIG | import("../index.js").IsmType.STORAGE_MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.STORAGE_MESSAGE_ID_MULTISIG;
    }, {
        type: import("../index.js").IsmType.MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.MESSAGE_ID_MULTISIG | import("../index.js").IsmType.STORAGE_MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.STORAGE_MESSAGE_ID_MULTISIG;
    }>>, z.ZodIntersection<z.ZodObject<{
        validators: z.ZodArray<z.ZodObject<{
            signingAddress: z.ZodString;
            weight: z.ZodNumber;
        }, "strip", z.ZodTypeAny, {
            signingAddress: string;
            weight: number;
        }, {
            signingAddress: string;
            weight: number;
        }>, "many">;
        thresholdWeight: z.ZodNumber;
    }, "strip", z.ZodTypeAny, {
        validators: {
            signingAddress: string;
            weight: number;
        }[];
        thresholdWeight: number;
    }, {
        validators: {
            signingAddress: string;
            weight: number;
        }[];
        thresholdWeight: number;
    }>, z.ZodObject<{
        type: z.ZodUnion<[z.ZodLiteral<import("../index.js").IsmType.WEIGHTED_MERKLE_ROOT_MULTISIG>, z.ZodLiteral<import("../index.js").IsmType.WEIGHTED_MESSAGE_ID_MULTISIG>]>;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").IsmType.WEIGHTED_MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.WEIGHTED_MESSAGE_ID_MULTISIG;
    }, {
        type: import("../index.js").IsmType.WEIGHTED_MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.WEIGHTED_MESSAGE_ID_MULTISIG;
    }>>, z.ZodType<import("../index.js").RoutingIsmConfig, z.ZodTypeDef, import("../index.js").RoutingIsmConfig>, z.ZodType<import("../index.js").AggregationIsmConfig, z.ZodTypeDef, import("../index.js").AggregationIsmConfig>, z.ZodObject<{
        type: z.ZodLiteral<import("../index.js").IsmType.ARB_L2_TO_L1>;
        bridge: z.ZodString;
    }, "strip", z.ZodTypeAny, {
        type: import("../index.js").IsmType.ARB_L2_TO_L1;
        bridge: string;
    }, {
        type: import("../index.js").IsmType.ARB_L2_TO_L1;
        bridge: string;
    }>]>>;
    foreignDeployment: z.ZodOptional<z.ZodString>;
    remoteRouters: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    gas: z.ZodOptional<z.ZodNumber>;
    destinationGas: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
}, "strip", z.ZodTypeAny, {
    owner: string;
    mailbox: string;
    ownerOverrides?: Record<string, string> | undefined;
    proxyAdmin?: {
        owner: string;
        ownerOverrides?: Record<string, string> | undefined;
        address?: string | undefined;
    } | undefined;
    hook?: string | {
        type: import("../index.js").HookType.MERKLE_TREE;
    } | {
        type: import("../index.js").HookType.INTERCHAIN_GAS_PAYMASTER;
        owner: string;
        beneficiary: string;
        oracleKey: string;
        overhead: Record<string, number>;
        oracleConfig: Record<string, {
            gasPrice: string;
            tokenExchangeRate: string;
        }>;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.PROTOCOL_FEE;
        owner: string;
        protocolFee: string;
        beneficiary: string;
        maxProtocolFee: string;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.PAUSABLE;
        owner: string;
        paused: boolean;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.OP_STACK;
        owner: string;
        nativeBridge: string;
        destinationChain: string;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.ARB_L2_TO_L1;
        destinationChain: string;
        arbSys: string;
        bridge?: string | undefined;
        childHook?: any;
    } | import("../index.js").DomainRoutingHookConfig | import("../index.js").FallbackRoutingHookConfig | import("../index.js").AggregationHookConfig | undefined;
    interchainSecurityModule?: string | ({
        validators: string[];
        threshold: number;
    } & {
        type: import("../index.js").IsmType.MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.MESSAGE_ID_MULTISIG | import("../index.js").IsmType.STORAGE_MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.STORAGE_MESSAGE_ID_MULTISIG;
    }) | ({
        validators: {
            signingAddress: string;
            weight: number;
        }[];
        thresholdWeight: number;
    } & {
        type: import("../index.js").IsmType.WEIGHTED_MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.WEIGHTED_MESSAGE_ID_MULTISIG;
    }) | {
        type: import("../index.js").IsmType.TEST_ISM;
    } | ({
        owner: string;
        paused: boolean;
        ownerOverrides?: Record<string, string> | undefined;
    } & {
        type: import("../index.js").IsmType.PAUSABLE;
    }) | {
        type: import("../index.js").IsmType.OP_STACK;
        origin: string;
        nativeBridge: string;
    } | {
        type: import("../index.js").IsmType.TRUSTED_RELAYER;
        relayer: string;
    } | {
        type: import("../index.js").IsmType.ARB_L2_TO_L1;
        bridge: string;
    } | import("../index.js").RoutingIsmConfig | import("../index.js").AggregationIsmConfig | undefined;
    foreignDeployment?: string | undefined;
    remoteRouters?: Record<string, string> | undefined;
    gas?: number | undefined;
    destinationGas?: Record<string, string> | undefined;
}, {
    owner: string;
    mailbox: string;
    ownerOverrides?: Record<string, string> | undefined;
    proxyAdmin?: {
        owner: string;
        ownerOverrides?: Record<string, string> | undefined;
        address?: string | undefined;
    } | undefined;
    hook?: string | {
        type: import("../index.js").HookType.MERKLE_TREE;
    } | {
        type: import("../index.js").HookType.INTERCHAIN_GAS_PAYMASTER;
        owner: string;
        beneficiary: string;
        oracleKey: string;
        overhead: Record<string, number>;
        oracleConfig: Record<string, {
            gasPrice: string;
            tokenExchangeRate: string;
        }>;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.PROTOCOL_FEE;
        owner: string;
        protocolFee: string;
        beneficiary: string;
        maxProtocolFee: string;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.PAUSABLE;
        owner: string;
        paused: boolean;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.OP_STACK;
        owner: string;
        nativeBridge: string;
        destinationChain: string;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.ARB_L2_TO_L1;
        destinationChain: string;
        arbSys: string;
        bridge?: string | undefined;
        childHook?: any;
    } | import("../index.js").DomainRoutingHookConfig | import("../index.js").FallbackRoutingHookConfig | import("../index.js").AggregationHookConfig | undefined;
    interchainSecurityModule?: string | ({
        validators: string[];
        threshold: number;
    } & {
        type: import("../index.js").IsmType.MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.MESSAGE_ID_MULTISIG | import("../index.js").IsmType.STORAGE_MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.STORAGE_MESSAGE_ID_MULTISIG;
    }) | ({
        validators: {
            signingAddress: string;
            weight: number;
        }[];
        thresholdWeight: number;
    } & {
        type: import("../index.js").IsmType.WEIGHTED_MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.WEIGHTED_MESSAGE_ID_MULTISIG;
    }) | {
        type: import("../index.js").IsmType.TEST_ISM;
    } | ({
        owner: string;
        paused: boolean;
        ownerOverrides?: Record<string, string> | undefined;
    } & {
        type: import("../index.js").IsmType.PAUSABLE;
    }) | {
        type: import("../index.js").IsmType.OP_STACK;
        origin: string;
        nativeBridge: string;
    } | {
        type: import("../index.js").IsmType.TRUSTED_RELAYER;
        relayer: string;
    } | {
        type: import("../index.js").IsmType.ARB_L2_TO_L1;
        bridge: string;
    } | import("../index.js").RoutingIsmConfig | import("../index.js").AggregationIsmConfig | undefined;
    foreignDeployment?: string | undefined;
    remoteRouters?: Record<string, string> | undefined;
    gas?: number | undefined;
    destinationGas?: Record<string, string> | undefined;
}>>>, Record<string, ({
    type: TokenType.collateral | TokenType.collateralVault | TokenType.collateralVaultRebase | TokenType.XERC20 | TokenType.XERC20Lockbox | TokenType.collateralFiat | TokenType.fastCollateral | TokenType.collateralUri;
    token: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
} | {
    type: TokenType.native | TokenType.nativeScaled;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
} | {
    type: TokenType.syntheticRebase;
    collateralChainName: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
} | {
    type: TokenType.synthetic | TokenType.fastSynthetic | TokenType.syntheticUri;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}) & {
    owner: string;
    mailbox: string;
    ownerOverrides?: Record<string, string> | undefined;
    proxyAdmin?: {
        owner: string;
        ownerOverrides?: Record<string, string> | undefined;
        address?: string | undefined;
    } | undefined;
    hook?: string | {
        type: import("../index.js").HookType.MERKLE_TREE;
    } | {
        type: import("../index.js").HookType.INTERCHAIN_GAS_PAYMASTER;
        owner: string;
        beneficiary: string;
        oracleKey: string;
        overhead: Record<string, number>;
        oracleConfig: Record<string, {
            gasPrice: string;
            tokenExchangeRate: string;
        }>;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.PROTOCOL_FEE;
        owner: string;
        protocolFee: string;
        beneficiary: string;
        maxProtocolFee: string;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.PAUSABLE;
        owner: string;
        paused: boolean;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.OP_STACK;
        owner: string;
        nativeBridge: string;
        destinationChain: string;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.ARB_L2_TO_L1;
        destinationChain: string;
        arbSys: string;
        bridge?: string | undefined;
        childHook?: any;
    } | import("../index.js").DomainRoutingHookConfig | import("../index.js").FallbackRoutingHookConfig | import("../index.js").AggregationHookConfig | undefined;
    interchainSecurityModule?: string | ({
        validators: string[];
        threshold: number;
    } & {
        type: import("../index.js").IsmType.MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.MESSAGE_ID_MULTISIG | import("../index.js").IsmType.STORAGE_MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.STORAGE_MESSAGE_ID_MULTISIG;
    }) | ({
        validators: {
            signingAddress: string;
            weight: number;
        }[];
        thresholdWeight: number;
    } & {
        type: import("../index.js").IsmType.WEIGHTED_MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.WEIGHTED_MESSAGE_ID_MULTISIG;
    }) | {
        type: import("../index.js").IsmType.TEST_ISM;
    } | ({
        owner: string;
        paused: boolean;
        ownerOverrides?: Record<string, string> | undefined;
    } & {
        type: import("../index.js").IsmType.PAUSABLE;
    }) | {
        type: import("../index.js").IsmType.OP_STACK;
        origin: string;
        nativeBridge: string;
    } | {
        type: import("../index.js").IsmType.TRUSTED_RELAYER;
        relayer: string;
    } | {
        type: import("../index.js").IsmType.ARB_L2_TO_L1;
        bridge: string;
    } | import("../index.js").RoutingIsmConfig | import("../index.js").AggregationIsmConfig | undefined;
    foreignDeployment?: string | undefined;
    remoteRouters?: Record<string, string> | undefined;
    gas?: number | undefined;
    destinationGas?: Record<string, string> | undefined;
}>, Record<string, ({
    type: TokenType.collateral | TokenType.collateralVault | TokenType.collateralVaultRebase | TokenType.XERC20 | TokenType.XERC20Lockbox | TokenType.collateralFiat | TokenType.fastCollateral | TokenType.collateralUri;
    token: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
} | {
    type: TokenType.native | TokenType.nativeScaled;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
} | {
    type: TokenType.syntheticRebase;
    collateralChainName: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
} | {
    type: TokenType.synthetic | TokenType.fastSynthetic | TokenType.syntheticUri;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}) & {
    owner: string;
    mailbox: string;
    ownerOverrides?: Record<string, string> | undefined;
    proxyAdmin?: {
        owner: string;
        ownerOverrides?: Record<string, string> | undefined;
        address?: string | undefined;
    } | undefined;
    hook?: string | {
        type: import("../index.js").HookType.MERKLE_TREE;
    } | {
        type: import("../index.js").HookType.INTERCHAIN_GAS_PAYMASTER;
        owner: string;
        beneficiary: string;
        oracleKey: string;
        overhead: Record<string, number>;
        oracleConfig: Record<string, {
            gasPrice: string;
            tokenExchangeRate: string;
        }>;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.PROTOCOL_FEE;
        owner: string;
        protocolFee: string;
        beneficiary: string;
        maxProtocolFee: string;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.PAUSABLE;
        owner: string;
        paused: boolean;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.OP_STACK;
        owner: string;
        nativeBridge: string;
        destinationChain: string;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.ARB_L2_TO_L1;
        destinationChain: string;
        arbSys: string;
        bridge?: string | undefined;
        childHook?: any;
    } | import("../index.js").DomainRoutingHookConfig | import("../index.js").FallbackRoutingHookConfig | import("../index.js").AggregationHookConfig | undefined;
    interchainSecurityModule?: string | ({
        validators: string[];
        threshold: number;
    } & {
        type: import("../index.js").IsmType.MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.MESSAGE_ID_MULTISIG | import("../index.js").IsmType.STORAGE_MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.STORAGE_MESSAGE_ID_MULTISIG;
    }) | ({
        validators: {
            signingAddress: string;
            weight: number;
        }[];
        thresholdWeight: number;
    } & {
        type: import("../index.js").IsmType.WEIGHTED_MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.WEIGHTED_MESSAGE_ID_MULTISIG;
    }) | {
        type: import("../index.js").IsmType.TEST_ISM;
    } | ({
        owner: string;
        paused: boolean;
        ownerOverrides?: Record<string, string> | undefined;
    } & {
        type: import("../index.js").IsmType.PAUSABLE;
    }) | {
        type: import("../index.js").IsmType.OP_STACK;
        origin: string;
        nativeBridge: string;
    } | {
        type: import("../index.js").IsmType.TRUSTED_RELAYER;
        relayer: string;
    } | {
        type: import("../index.js").IsmType.ARB_L2_TO_L1;
        bridge: string;
    } | import("../index.js").RoutingIsmConfig | import("../index.js").AggregationIsmConfig | undefined;
    foreignDeployment?: string | undefined;
    remoteRouters?: Record<string, string> | undefined;
    gas?: number | undefined;
    destinationGas?: Record<string, string> | undefined;
}>>, Record<string, ({
    type: TokenType.collateral | TokenType.collateralVault | TokenType.collateralVaultRebase | TokenType.XERC20 | TokenType.XERC20Lockbox | TokenType.collateralFiat | TokenType.fastCollateral | TokenType.collateralUri;
    token: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
} | {
    type: TokenType.native | TokenType.nativeScaled;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
} | {
    type: TokenType.syntheticRebase;
    collateralChainName: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
} | {
    type: TokenType.synthetic | TokenType.fastSynthetic | TokenType.syntheticUri;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}) & {
    owner: string;
    mailbox: string;
    ownerOverrides?: Record<string, string> | undefined;
    proxyAdmin?: {
        owner: string;
        ownerOverrides?: Record<string, string> | undefined;
        address?: string | undefined;
    } | undefined;
    hook?: string | {
        type: import("../index.js").HookType.MERKLE_TREE;
    } | {
        type: import("../index.js").HookType.INTERCHAIN_GAS_PAYMASTER;
        owner: string;
        beneficiary: string;
        oracleKey: string;
        overhead: Record<string, number>;
        oracleConfig: Record<string, {
            gasPrice: string;
            tokenExchangeRate: string;
        }>;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.PROTOCOL_FEE;
        owner: string;
        protocolFee: string;
        beneficiary: string;
        maxProtocolFee: string;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.PAUSABLE;
        owner: string;
        paused: boolean;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.OP_STACK;
        owner: string;
        nativeBridge: string;
        destinationChain: string;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.ARB_L2_TO_L1;
        destinationChain: string;
        arbSys: string;
        bridge?: string | undefined;
        childHook?: any;
    } | import("../index.js").DomainRoutingHookConfig | import("../index.js").FallbackRoutingHookConfig | import("../index.js").AggregationHookConfig | undefined;
    interchainSecurityModule?: string | ({
        validators: string[];
        threshold: number;
    } & {
        type: import("../index.js").IsmType.MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.MESSAGE_ID_MULTISIG | import("../index.js").IsmType.STORAGE_MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.STORAGE_MESSAGE_ID_MULTISIG;
    }) | ({
        validators: {
            signingAddress: string;
            weight: number;
        }[];
        thresholdWeight: number;
    } & {
        type: import("../index.js").IsmType.WEIGHTED_MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.WEIGHTED_MESSAGE_ID_MULTISIG;
    }) | {
        type: import("../index.js").IsmType.TEST_ISM;
    } | ({
        owner: string;
        paused: boolean;
        ownerOverrides?: Record<string, string> | undefined;
    } & {
        type: import("../index.js").IsmType.PAUSABLE;
    }) | {
        type: import("../index.js").IsmType.OP_STACK;
        origin: string;
        nativeBridge: string;
    } | {
        type: import("../index.js").IsmType.TRUSTED_RELAYER;
        relayer: string;
    } | {
        type: import("../index.js").IsmType.ARB_L2_TO_L1;
        bridge: string;
    } | import("../index.js").RoutingIsmConfig | import("../index.js").AggregationIsmConfig | undefined;
    foreignDeployment?: string | undefined;
    remoteRouters?: Record<string, string> | undefined;
    gas?: number | undefined;
    destinationGas?: Record<string, string> | undefined;
}>, Record<string, ({
    type: TokenType.collateral | TokenType.collateralVault | TokenType.collateralVaultRebase | TokenType.XERC20 | TokenType.XERC20Lockbox | TokenType.collateralFiat | TokenType.fastCollateral | TokenType.collateralUri;
    token: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
} | {
    type: TokenType.native | TokenType.nativeScaled;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
} | {
    type: TokenType.syntheticRebase;
    collateralChainName: string;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
} | {
    type: TokenType.synthetic | TokenType.fastSynthetic | TokenType.syntheticUri;
    symbol?: string | undefined;
    name?: string | undefined;
    decimals?: number | undefined;
    totalSupply?: string | number | undefined;
    scale?: number | undefined;
    isNft?: boolean | undefined;
}) & {
    owner: string;
    mailbox: string;
    ownerOverrides?: Record<string, string> | undefined;
    proxyAdmin?: {
        owner: string;
        ownerOverrides?: Record<string, string> | undefined;
        address?: string | undefined;
    } | undefined;
    hook?: string | {
        type: import("../index.js").HookType.MERKLE_TREE;
    } | {
        type: import("../index.js").HookType.INTERCHAIN_GAS_PAYMASTER;
        owner: string;
        beneficiary: string;
        oracleKey: string;
        overhead: Record<string, number>;
        oracleConfig: Record<string, {
            gasPrice: string;
            tokenExchangeRate: string;
        }>;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.PROTOCOL_FEE;
        owner: string;
        protocolFee: string;
        beneficiary: string;
        maxProtocolFee: string;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.PAUSABLE;
        owner: string;
        paused: boolean;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.OP_STACK;
        owner: string;
        nativeBridge: string;
        destinationChain: string;
        ownerOverrides?: Record<string, string> | undefined;
    } | {
        type: import("../index.js").HookType.ARB_L2_TO_L1;
        destinationChain: string;
        arbSys: string;
        bridge?: string | undefined;
        childHook?: any;
    } | import("../index.js").DomainRoutingHookConfig | import("../index.js").FallbackRoutingHookConfig | import("../index.js").AggregationHookConfig | undefined;
    interchainSecurityModule?: string | ({
        validators: string[];
        threshold: number;
    } & {
        type: import("../index.js").IsmType.MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.MESSAGE_ID_MULTISIG | import("../index.js").IsmType.STORAGE_MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.STORAGE_MESSAGE_ID_MULTISIG;
    }) | ({
        validators: {
            signingAddress: string;
            weight: number;
        }[];
        thresholdWeight: number;
    } & {
        type: import("../index.js").IsmType.WEIGHTED_MERKLE_ROOT_MULTISIG | import("../index.js").IsmType.WEIGHTED_MESSAGE_ID_MULTISIG;
    }) | {
        type: import("../index.js").IsmType.TEST_ISM;
    } | ({
        owner: string;
        paused: boolean;
        ownerOverrides?: Record<string, string> | undefined;
    } & {
        type: import("../index.js").IsmType.PAUSABLE;
    }) | {
        type: import("../index.js").IsmType.OP_STACK;
        origin: string;
        nativeBridge: string;
    } | {
        type: import("../index.js").IsmType.TRUSTED_RELAYER;
        relayer: string;
    } | {
        type: import("../index.js").IsmType.ARB_L2_TO_L1;
        bridge: string;
    } | import("../index.js").RoutingIsmConfig | import("../index.js").AggregationIsmConfig | undefined;
    foreignDeployment?: string | undefined;
    remoteRouters?: Record<string, string> | undefined;
    gas?: number | undefined;
    destinationGas?: Record<string, string> | undefined;
}>>;
//# sourceMappingURL=schemas.d.ts.map
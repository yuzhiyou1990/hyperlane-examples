import { ethers } from 'ethers';
import { Address, ChainId } from '@hyperlane-xyz/utils';
import { AnnotatedEV5Transaction } from '../providers/ProviderType.js';
import { DeployedOwnableConfig } from './types.js';
export type UpgradeConfig = {
    timelock: {
        delay: number;
        roles: {
            executor: Address;
            proposer: Address;
        };
    };
};
export declare function proxyImplementation(provider: ethers.providers.Provider, proxy: Address): Promise<Address>;
export declare function isInitialized(provider: ethers.providers.Provider, contract: Address): Promise<boolean>;
export declare function proxyAdmin(provider: ethers.providers.Provider, proxy: Address): Promise<Address>;
export declare function proxyConstructorArgs<C extends ethers.Contract>(implementation: C, proxyAdmin: string, initializeArgs?: Parameters<C['initialize']>): [string, string, string];
export declare function isProxy(provider: ethers.providers.Provider, proxy: Address): Promise<boolean>;
export declare function proxyAdminUpdateTxs(chainId: ChainId, proxyAddress: Address, actualConfig: Readonly<{
    proxyAdmin?: DeployedOwnableConfig;
}>, expectedConfig: Readonly<{
    proxyAdmin?: DeployedOwnableConfig;
}>): AnnotatedEV5Transaction[];
//# sourceMappingURL=proxy.d.ts.map
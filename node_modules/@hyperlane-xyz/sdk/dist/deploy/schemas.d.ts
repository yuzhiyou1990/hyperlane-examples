import { z } from 'zod';
export declare const OwnerSchema: z.ZodString;
export declare const OwnableConfigSchema: z.ZodObject<{
    owner: z.ZodString;
}, "strip", z.ZodTypeAny, {
    owner: string;
}, {
    owner: string;
}>;
export declare const ProxyFactoryFactoriesSchema: z.ZodObject<{
    staticMerkleRootMultisigIsmFactory: z.ZodString;
    staticMessageIdMultisigIsmFactory: z.ZodString;
    staticAggregationIsmFactory: z.ZodString;
    staticAggregationHookFactory: z.ZodString;
    domainRoutingIsmFactory: z.ZodString;
    staticMerkleRootWeightedMultisigIsmFactory: z.ZodString;
    staticMessageIdWeightedMultisigIsmFactory: z.ZodString;
}, "strip", z.ZodTypeAny, {
    staticMerkleRootMultisigIsmFactory: string;
    staticMessageIdMultisigIsmFactory: string;
    staticAggregationIsmFactory: string;
    staticAggregationHookFactory: string;
    domainRoutingIsmFactory: string;
    staticMerkleRootWeightedMultisigIsmFactory: string;
    staticMessageIdWeightedMultisigIsmFactory: string;
}, {
    staticMerkleRootMultisigIsmFactory: string;
    staticMessageIdMultisigIsmFactory: string;
    staticAggregationIsmFactory: string;
    staticAggregationHookFactory: string;
    domainRoutingIsmFactory: string;
    staticMerkleRootWeightedMultisigIsmFactory: string;
    staticMessageIdWeightedMultisigIsmFactory: string;
}>;
export type ProxyFactoryFactoriesAddresses = z.infer<typeof ProxyFactoryFactoriesSchema>;
//# sourceMappingURL=schemas.d.ts.map
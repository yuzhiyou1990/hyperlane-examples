import { BigNumber, ethers } from 'ethers';
import { exclude, objMap } from '@hyperlane-xyz/utils';
import { HookType } from '../hook/types.js';
import { IsmType } from '../ism/types.js';
export function randomInt(max, min = 0) {
    return Math.floor(Math.random() * (max - min)) + min;
}
export function randomAddress() {
    return ethers.utils.hexlify(ethers.utils.randomBytes(20)).toLowerCase();
}
export function createRouterConfigMap(owner, coreContracts, igpContracts) {
    return objMap(coreContracts, (chain, contracts) => {
        return {
            owner,
            mailbox: contracts.mailbox.address,
            interchainGasPaymaster: igpContracts[chain].interchainGasPaymaster.address,
        };
    });
}
const nonZeroAddress = ethers.constants.AddressZero.replace('00', '01');
// dummy config as TestInbox and TestOutbox do not use deployed ISM
export function testCoreConfig(chains, owner = nonZeroAddress) {
    const chainConfig = {
        owner,
        defaultIsm: {
            type: IsmType.TEST_ISM,
        },
        defaultHook: {
            type: HookType.MERKLE_TREE,
        },
        requiredHook: {
            type: HookType.PROTOCOL_FEE,
            maxProtocolFee: ethers.utils.parseUnits('1', 'gwei').toString(), // 1 gwei of native token
            protocolFee: BigNumber.from(1).toString(), // 1 wei
            beneficiary: nonZeroAddress,
            owner,
        },
    };
    return Object.fromEntries(chains.map((local) => [local, chainConfig]));
}
const TEST_ORACLE_CONFIG = {
    gasPrice: ethers.utils.parseUnits('1', 'gwei').toString(),
    tokenExchangeRate: ethers.utils.parseUnits('1', 10).toString(),
};
const TEST_OVERHEAD_COST = 60000;
export function testIgpConfig(chains, owner = nonZeroAddress) {
    return Object.fromEntries(chains.map((local) => {
        const overhead = {};
        const oracleConfig = {};
        exclude(local, chains).map((remote) => {
            overhead[remote] = TEST_OVERHEAD_COST;
            oracleConfig[remote] = TEST_ORACLE_CONFIG;
        });
        return [
            local,
            {
                type: HookType.INTERCHAIN_GAS_PAYMASTER,
                owner,
                oracleKey: owner,
                beneficiary: owner,
                overhead,
                oracleConfig,
            },
        ];
    }));
}
//# sourceMappingURL=testUtils.js.map
/// <reference types="node" resolution-mode="require"/>
import { Address, HexString, ProtocolType } from './types.js';
export declare function isAddressEvm(address: Address): boolean;
export declare function isAddressSealevel(address: Address): boolean;
export declare function isAddressCosmos(address: Address): boolean;
export declare function getAddressProtocolType(address: Address): ProtocolType | undefined;
export declare function isAddress(address: Address): boolean;
export declare function isValidAddressEvm(address: Address): boolean;
export declare function isValidAddressSealevel(address: Address): boolean;
export declare function isValidAddressCosmos(address: Address): boolean;
export declare function isValidAddress(address: Address, protocol?: ProtocolType): boolean;
export declare function normalizeAddressEvm(address: Address): string;
export declare function normalizeAddressSealevel(address: Address): string;
export declare function normalizeAddressCosmos(address: Address): string;
export declare function normalizeAddress(address: Address, protocol?: ProtocolType): string;
export declare function eqAddressEvm(a1: Address, a2: Address): boolean;
export declare function eqAddressSol(a1: Address, a2: Address): boolean;
export declare function eqAddressCosmos(a1: Address, a2: Address): boolean;
export declare function eqAddress(a1: Address, a2: Address): boolean;
export declare function isValidTransactionHashEvm(input: string): boolean;
export declare function isValidTransactionHashSealevel(input: string): boolean;
export declare function isValidTransactionHashCosmos(input: string): boolean;
export declare function isValidTransactionHash(input: string, protocol: ProtocolType): boolean;
export declare function isZeroishAddress(address: Address): boolean;
export declare function shortenAddress(address: Address, capitalize?: boolean): string;
export declare function capitalizeAddress(address: Address): string;
export declare function addressToBytes32Evm(address: Address): string;
export declare function bytes32ToAddress(bytes32: HexString): Address;
export declare function addressToBytesEvm(address: Address): Uint8Array;
export declare function addressToBytesSol(address: Address): Uint8Array;
export declare function addressToBytesCosmos(address: Address): Uint8Array;
export declare function addressToBytes(address: Address, protocol?: ProtocolType): Uint8Array;
export declare function addressToByteHexString(address: string, protocol?: ProtocolType): string;
export declare function addressToBytes32(address: Address, protocol?: ProtocolType): string;
export declare function bytesToBytes32(bytes: Uint8Array): string;
export declare function padBytesToLength(bytes: Uint8Array, length: number): Buffer;
export declare function bytesToAddressEvm(bytes: Uint8Array): Address;
export declare function bytesToAddressSol(bytes: Uint8Array): Address;
export declare function bytesToAddressCosmos(bytes: Uint8Array, prefix: string): Address;
export declare function bytesToProtocolAddress(bytes: Uint8Array, toProtocol: ProtocolType, prefix?: string): string;
export declare function convertToProtocolAddress(address: string, protocol: ProtocolType, prefix?: string): string;
export declare function ensure0x(hexstr: string): string;
export declare function strip0x(hexstr: string): string;
//# sourceMappingURL=addresses.d.ts.map
diff --git a/dist/token/Token.js b/dist/token/Token.js
index 78dd0627a5fea703b3f9575488ba36939bac7194..24516cad96eb6fe7001880fe8a16808e31641485 100644
--- a/dist/token/Token.js
+++ b/dist/token/Token.js
@@ -1,4 +1,7 @@
+import { ERC20__factory } from '@hyperlane-xyz/core';
 import { assert, eqAddress, } from '@hyperlane-xyz/utils';
+import { Contract, ContractFactory, utils } from "ethers";
+import { encodeAbiParameters, pad } from 'viem';
 import { TokenAmount } from './TokenAmount.js';
 import { TokenConnectionType } from './TokenConnection.js';
 import { PROTOCOL_TO_NATIVE_STANDARD, TOKEN_COLLATERALIZED_STANDARDS, TOKEN_HYP_STANDARDS, TOKEN_MULTI_CHAIN_STANDARDS, TOKEN_NFT_STANDARDS, TOKEN_STANDARD_TO_PROTOCOL, TokenStandard, XERC20_STANDARDS, } from './TokenStandard.js';
@@ -6,6 +9,117 @@ import { CwHypCollateralAdapter, CwHypNativeAdapter, CwHypSyntheticAdapter, CwNa
 import { CosmIbcToWarpTokenAdapter, CosmIbcTokenAdapter, CosmNativeTokenAdapter, } from './adapters/CosmosTokenAdapter.js';
 import { EvmHypCollateralAdapter, EvmHypCollateralFiatAdapter, EvmHypNativeAdapter, EvmHypSyntheticAdapter, EvmHypXERC20Adapter, EvmHypXERC20LockboxAdapter, EvmNativeTokenAdapter, EvmTokenAdapter, } from './adapters/EvmTokenAdapter.js';
 import { SealevelHypCollateralAdapter, SealevelHypNativeAdapter, SealevelHypSyntheticAdapter, SealevelNativeTokenAdapter, SealevelTokenAdapter, } from './adapters/SealevelTokenAdapter.js';
+const _abi = [ { type: "constructor", inputs: [ { name: "_mailbox", type: "address", internalType: "address", }, { name: "_permit2", type: "address", internalType: "address", }, ], stateMutability: "nonpayable", }, { type: "function", name: "GASLESS_CROSS_CHAIN_ORDER_TYPEHASH", inputs: [], outputs: [ { name: "", type: "bytes32", internalType: "bytes32", }, ], stateMutability: "view", }, { type: "function", name: "PACKAGE_VERSION", inputs: [], outputs: [ { name: "", type: "string", internalType: "string", }, ], stateMutability: "view", }, { type: "function", name: "PERMIT2", inputs: [], outputs: [ { name: "", type: "address", internalType: "contract IPermit2", }, ], stateMutability: "view", }, { type: "function", name: "destinationGas", inputs: [ { name: "", type: "uint32", internalType: "uint32", }, ], outputs: [ { name: "", type: "uint256", internalType: "uint256", }, ], stateMutability: "view", }, { type: "function", name: "domains", inputs: [], outputs: [ { name: "", type: "uint32[]", internalType: "uint32[]", }, ], stateMutability: "view", }, { type: "function", name: "enrollRemoteRouter", inputs: [ { name: "_domain", type: "uint32", internalType: "uint32", }, { name: "_router", type: "bytes32", internalType: "bytes32", }, ], outputs: [], stateMutability: "nonpayable", }, { type: "function", name: "enrollRemoteRouters", inputs: [ { name: "_domains", type: "uint32[]", internalType: "uint32[]", }, { name: "_addresses", type: "bytes32[]", internalType: "bytes32[]", }, ], outputs: [], stateMutability: "nonpayable", }, { type: "function", name: "fill", inputs: [ { name: "_orderId", type: "bytes32", internalType: "bytes32", }, { name: "_originData", type: "bytes", internalType: "bytes", }, { name: "_fillerData", type: "bytes", internalType: "bytes", }, ], outputs: [], stateMutability: "nonpayable", }, { type: "function", name: "handle", inputs: [ { name: "_origin", type: "uint32", internalType: "uint32", }, { name: "_sender", type: "bytes32", internalType: "bytes32", }, { name: "_message", type: "bytes", internalType: "bytes", }, ], outputs: [], stateMutability: "payable", }, { type: "function", name: "hook", inputs: [], outputs: [ { name: "", type: "address", internalType: "contract IPostDispatchHook", }, ], stateMutability: "view", }, { type: "function", name: "initialize", inputs: [ { name: "_customHook", type: "address", internalType: "address", }, { name: "_interchainSecurityModule", type: "address", internalType: "address", }, { name: "_owner", type: "address", internalType: "address", }, ], outputs: [], stateMutability: "nonpayable", }, { type: "function", name: "interchainSecurityModule", inputs: [], outputs: [ { name: "", type: "address", internalType: "contract IInterchainSecurityModule", }, ], stateMutability: "view", }, { type: "function", name: "localDomain", inputs: [], outputs: [ { name: "", type: "uint32", internalType: "uint32", }, ], stateMutability: "view", }, { type: "function", name: "mailbox", inputs: [], outputs: [ { name: "", type: "address", internalType: "contract IMailbox", }, ], stateMutability: "view", }, { type: "function", name: "open", inputs: [ { name: "order", type: "tuple", internalType: "struct OnchainCrossChainOrder", components: [ { name: "fillDeadline", type: "uint32", internalType: "uint32", }, { name: "orderDataType", type: "bytes32", internalType: "bytes32", }, { name: "orderData", type: "bytes", internalType: "bytes", }, ], }, ], outputs: [], stateMutability: "nonpayable", }, { type: "function", name: "openFor", inputs: [ { name: "order", type: "tuple", internalType: "struct GaslessCrossChainOrder", components: [ { name: "originSettler", type: "address", internalType: "address", }, { name: "user", type: "address", internalType: "address", }, { name: "nonce", type: "uint256", internalType: "uint256", }, { name: "originChainId", type: "uint64", internalType: "uint64", }, { name: "openDeadline", type: "uint32", internalType: "uint32", }, { name: "fillDeadline", type: "uint32", internalType: "uint32", }, { name: "orderDataType", type: "bytes32", internalType: "bytes32", }, { name: "orderData", type: "bytes", internalType: "bytes", }, ], }, { name: "signature", type: "bytes", internalType: "bytes", }, { name: "", type: "bytes", internalType: "bytes", }, ], outputs: [], stateMutability: "nonpayable", }, { type: "function", name: "orderFillerData", inputs: [ { name: "orderId", type: "bytes32", internalType: "bytes32", }, ], outputs: [ { name: "fillerData", type: "bytes", internalType: "bytes", }, ], stateMutability: "view", }, { type: "function", name: "orderStatus", inputs: [ { name: "orderId", type: "bytes32", internalType: "bytes32", }, ], outputs: [ { name: "status", type: "uint8", internalType: "enum Base7683.OrderStatus", }, ], stateMutability: "view", }, { type: "function", name: "orders", inputs: [ { name: "orderId", type: "bytes32", internalType: "bytes32", }, ], outputs: [ { name: "sender", type: "bytes32", internalType: "bytes32", }, { name: "recipient", type: "bytes32", internalType: "bytes32", }, { name: "inputToken", type: "bytes32", internalType: "bytes32", }, { name: "outputToken", type: "bytes32", internalType: "bytes32", }, { name: "amountIn", type: "uint256", internalType: "uint256", }, { name: "amountOut", type: "uint256", internalType: "uint256", }, { name: "senderNonce", type: "uint256", internalType: "uint256", }, { name: "originDomain", type: "uint32", internalType: "uint32", }, { name: "destinationDomain", type: "uint32", internalType: "uint32", }, { name: "fillDeadline", type: "uint32", internalType: "uint32", }, { name: "data", type: "bytes", internalType: "bytes", }, ], stateMutability: "view", }, { type: "function", name: "owner", inputs: [], outputs: [ { name: "", type: "address", internalType: "address", }, ], stateMutability: "view", }, { type: "function", name: "quoteGasPayment", inputs: [ { name: "_destinationDomain", type: "uint32", internalType: "uint32", }, ], outputs: [ { name: "", type: "uint256", internalType: "uint256", }, ], stateMutability: "view", }, { type: "function", name: "refund", inputs: [ { name: "_ordersData", type: "tuple[]", internalType: "struct OrderData[]", components: [ { name: "sender", type: "bytes32", internalType: "bytes32", }, { name: "recipient", type: "bytes32", internalType: "bytes32", }, { name: "inputToken", type: "bytes32", internalType: "bytes32", }, { name: "outputToken", type: "bytes32", internalType: "bytes32", }, { name: "amountIn", type: "uint256", internalType: "uint256", }, { name: "amountOut", type: "uint256", internalType: "uint256", }, { name: "senderNonce", type: "uint256", internalType: "uint256", }, { name: "originDomain", type: "uint32", internalType: "uint32", }, { name: "destinationDomain", type: "uint32", internalType: "uint32", }, { name: "fillDeadline", type: "uint32", internalType: "uint32", }, { name: "data", type: "bytes", internalType: "bytes", }, ], }, ], outputs: [], stateMutability: "payable", }, { type: "function", name: "renounceOwnership", inputs: [], outputs: [], stateMutability: "nonpayable", }, { type: "function", name: "resolve", inputs: [ { name: "order", type: "tuple", internalType: "struct OnchainCrossChainOrder", components: [ { name: "fillDeadline", type: "uint32", internalType: "uint32", }, { name: "orderDataType", type: "bytes32", internalType: "bytes32", }, { name: "orderData", type: "bytes", internalType: "bytes", }, ], }, ], outputs: [ { name: "resolvedOrder", type: "tuple", internalType: "struct ResolvedCrossChainOrder", components: [ { name: "user", type: "address", internalType: "address", }, { name: "originChainId", type: "uint64", internalType: "uint64", }, { name: "openDeadline", type: "uint32", internalType: "uint32", }, { name: "fillDeadline", type: "uint32", internalType: "uint32", }, { name: "maxSpent", type: "tuple[]", internalType: "struct Output[]", components: [ { name: "token", type: "bytes32", internalType: "bytes32", }, { name: "amount", type: "uint256", internalType: "uint256", }, { name: "recipient", type: "bytes32", internalType: "bytes32", }, { name: "chainId", type: "uint64", internalType: "uint64", }, ], }, { name: "minReceived", type: "tuple[]", internalType: "struct Output[]", components: [ { name: "token", type: "bytes32", internalType: "bytes32", }, { name: "amount", type: "uint256", internalType: "uint256", }, { name: "recipient", type: "bytes32", internalType: "bytes32", }, { name: "chainId", type: "uint64", internalType: "uint64", }, ], }, { name: "fillInstructions", type: "tuple[]", internalType: "struct FillInstruction[]", components: [ { name: "destinationChainId", type: "uint64", internalType: "uint64", }, { name: "destinationSettler", type: "bytes32", internalType: "bytes32", }, { name: "originData", type: "bytes", internalType: "bytes", }, ], }, ], }, ], stateMutability: "view", }, { type: "function", name: "resolveFor", inputs: [ { name: "order", type: "tuple", internalType: "struct GaslessCrossChainOrder", components: [ { name: "originSettler", type: "address", internalType: "address", }, { name: "user", type: "address", internalType: "address", }, { name: "nonce", type: "uint256", internalType: "uint256", }, { name: "originChainId", type: "uint64", internalType: "uint64", }, { name: "openDeadline", type: "uint32", internalType: "uint32", }, { name: "fillDeadline", type: "uint32", internalType: "uint32", }, { name: "orderDataType", type: "bytes32", internalType: "bytes32", }, { name: "orderData", type: "bytes", internalType: "bytes", }, ], }, { name: "", type: "bytes", internalType: "bytes", }, ], outputs: [ { name: "resolvedOrder", type: "tuple", internalType: "struct ResolvedCrossChainOrder", components: [ { name: "user", type: "address", internalType: "address", }, { name: "originChainId", type: "uint64", internalType: "uint64", }, { name: "openDeadline", type: "uint32", internalType: "uint32", }, { name: "fillDeadline", type: "uint32", internalType: "uint32", }, { name: "maxSpent", type: "tuple[]", internalType: "struct Output[]", components: [ { name: "token", type: "bytes32", internalType: "bytes32", }, { name: "amount", type: "uint256", internalType: "uint256", }, { name: "recipient", type: "bytes32", internalType: "bytes32", }, { name: "chainId", type: "uint64", internalType: "uint64", }, ], }, { name: "minReceived", type: "tuple[]", internalType: "struct Output[]", components: [ { name: "token", type: "bytes32", internalType: "bytes32", }, { name: "amount", type: "uint256", internalType: "uint256", }, { name: "recipient", type: "bytes32", internalType: "bytes32", }, { name: "chainId", type: "uint64", internalType: "uint64", }, ], }, { name: "fillInstructions", type: "tuple[]", internalType: "struct FillInstruction[]", components: [ { name: "destinationChainId", type: "uint64", internalType: "uint64", }, { name: "destinationSettler", type: "bytes32", internalType: "bytes32", }, { name: "originData", type: "bytes", internalType: "bytes", }, ], }, ], }, ], stateMutability: "view", }, { type: "function", name: "routers", inputs: [ { name: "_domain", type: "uint32", internalType: "uint32", }, ], outputs: [ { name: "", type: "bytes32", internalType: "bytes32", }, ], stateMutability: "view", }, { type: "function", name: "senderNonce", inputs: [ { name: "sender", type: "address", internalType: "address", }, ], outputs: [ { name: "nonce", type: "uint256", internalType: "uint256", }, ], stateMutability: "view", }, { type: "function", name: "setDestinationGas", inputs: [ { name: "domain", type: "uint32", internalType: "uint32", }, { name: "gas", type: "uint256", internalType: "uint256", }, ], outputs: [], stateMutability: "nonpayable", }, { type: "function", name: "setDestinationGas", inputs: [ { name: "gasConfigs", type: "tuple[]", internalType: "struct GasRouter.GasRouterConfig[]", components: [ { name: "domain", type: "uint32", internalType: "uint32", }, { name: "gas", type: "uint256", internalType: "uint256", }, ], }, ], outputs: [], stateMutability: "nonpayable", }, { type: "function", name: "setHook", inputs: [ { name: "_hook", type: "address", internalType: "address", }, ], outputs: [], stateMutability: "nonpayable", }, { type: "function", name: "setInterchainSecurityModule", inputs: [ { name: "_module", type: "address", internalType: "address", }, ], outputs: [], stateMutability: "nonpayable", }, { type: "function", name: "settle", inputs: [ { name: "_orderIds", type: "bytes32[]", internalType: "bytes32[]", }, ], outputs: [], stateMutability: "payable", }, { type: "function", name: "transferOwnership", inputs: [ { name: "newOwner", type: "address", internalType: "address", }, ], outputs: [], stateMutability: "nonpayable", }, { type: "function", name: "unenrollRemoteRouter", inputs: [ { name: "_domain", type: "uint32", internalType: "uint32", }, ], outputs: [], stateMutability: "nonpayable", }, { type: "function", name: "unenrollRemoteRouters", inputs: [ { name: "_domains", type: "uint32[]", internalType: "uint32[]", }, ], outputs: [], stateMutability: "nonpayable", }, { type: "function", name: "witnessHash", inputs: [ { name: "order", type: "tuple", internalType: "struct GaslessCrossChainOrder", components: [ { name: "originSettler", type: "address", internalType: "address", }, { name: "user", type: "address", internalType: "address", }, { name: "nonce", type: "uint256", internalType: "uint256", }, { name: "originChainId", type: "uint64", internalType: "uint64", }, { name: "openDeadline", type: "uint32", internalType: "uint32", }, { name: "fillDeadline", type: "uint32", internalType: "uint32", }, { name: "orderDataType", type: "bytes32", internalType: "bytes32", }, { name: "orderData", type: "bytes", internalType: "bytes", }, ], }, ], outputs: [ { name: "", type: "bytes32", internalType: "bytes32", }, ], stateMutability: "pure", }, { type: "function", name: "witnessTypeString", inputs: [], outputs: [ { name: "", type: "string", internalType: "string", }, ], stateMutability: "view", }, { type: "event", name: "Filled", inputs: [ { name: "orderId", type: "bytes32", indexed: false, internalType: "bytes32", }, { name: "originData", type: "bytes", indexed: false, internalType: "bytes", }, { name: "fillerData", type: "bytes", indexed: false, internalType: "bytes", }, ], anonymous: false, }, { type: "event", name: "GasSet", inputs: [ { name: "domain", type: "uint32", indexed: false, internalType: "uint32", }, { name: "gas", type: "uint256", indexed: false, internalType: "uint256", }, ], anonymous: false, }, { type: "event", name: "Initialized", inputs: [ { name: "version", type: "uint8", indexed: false, internalType: "uint8", }, ], anonymous: false, }, { type: "event", name: "Open", inputs: [ { name: "orderId", type: "bytes32", indexed: true, internalType: "bytes32", }, { name: "resolvedOrder", type: "tuple", indexed: false, internalType: "struct ResolvedCrossChainOrder", components: [ { name: "user", type: "address", internalType: "address", }, { name: "originChainId", type: "uint64", internalType: "uint64", }, { name: "openDeadline", type: "uint32", internalType: "uint32", }, { name: "fillDeadline", type: "uint32", internalType: "uint32", }, { name: "maxSpent", type: "tuple[]", internalType: "struct Output[]", components: [ { name: "token", type: "bytes32", internalType: "bytes32", }, { name: "amount", type: "uint256", internalType: "uint256", }, { name: "recipient", type: "bytes32", internalType: "bytes32", }, { name: "chainId", type: "uint64", internalType: "uint64", }, ], }, { name: "minReceived", type: "tuple[]", internalType: "struct Output[]", components: [ { name: "token", type: "bytes32", internalType: "bytes32", }, { name: "amount", type: "uint256", internalType: "uint256", }, { name: "recipient", type: "bytes32", internalType: "bytes32", }, { name: "chainId", type: "uint64", internalType: "uint64", }, ], }, { name: "fillInstructions", type: "tuple[]", internalType: "struct FillInstruction[]", components: [ { name: "destinationChainId", type: "uint64", internalType: "uint64", }, { name: "destinationSettler", type: "bytes32", internalType: "bytes32", }, { name: "originData", type: "bytes", internalType: "bytes", }, ], }, ], }, ], anonymous: false, }, { type: "event", name: "OwnershipTransferred", inputs: [ { name: "previousOwner", type: "address", indexed: true, internalType: "address", }, { name: "newOwner", type: "address", indexed: true, internalType: "address", }, ], anonymous: false, }, { type: "event", name: "Refund", inputs: [ { name: "orderIds", type: "bytes32[]", indexed: false, internalType: "bytes32[]", }, ], anonymous: false, }, { type: "event", name: "Refunded", inputs: [ { name: "orderId", type: "bytes32", indexed: false, internalType: "bytes32", }, { name: "receiver", type: "address", indexed: false, internalType: "address", }, ], anonymous: false, }, { type: "event", name: "Settle", inputs: [ { name: "orderIds", type: "bytes32[]", indexed: false, internalType: "bytes32[]", }, { name: "ordersFillerData", type: "bytes[]", indexed: false, internalType: "bytes[]", }, ], anonymous: false, }, { type: "event", name: "Settled", inputs: [ { name: "orderId", type: "bytes32", indexed: false, internalType: "bytes32", }, { name: "receiver", type: "address", indexed: false, internalType: "address", }, ], anonymous: false, }, { type: "error", name: "InvalidDomain", inputs: [], }, { type: "error", name: "InvalidOrderDomain", inputs: [], }, { type: "error", name: "InvalidOrderId", inputs: [], }, { type: "error", name: "InvalidOrderOrigin", inputs: [], }, { type: "error", name: "InvalidOrderStatus", inputs: [], }, { type: "error", name: "InvalidOrderType", inputs: [ { name: "orderType", type: "bytes32", internalType: "bytes32", }, ], }, { type: "error", name: "InvalidOriginDomain", inputs: [ { name: "originDomain", type: "uint32", internalType: "uint32", }, ], }, { type: "error", name: "InvalidSender", inputs: [], }, { type: "error", name: "InvalidSenderNonc", inputs: [], }, { type: "error", name: "InvalidSenderNonce", inputs: [], }, { type: "error", name: "OrderFillExpired", inputs: [], }, { type: "error", name: "OrderFillNotExpired", inputs: [], }, { type: "error", name: "OrderOpenExpired", inputs: [], }, ];
+const _bytecode =
+  "0x60e060405234801561000f575f80fd5b506040516158ac3803806158ac83398101604081905261002e91610190565b80828080806001600160a01b0381163b61008e5760405162461bcd60e51b815260206004820152601e60248201527f4d61696c626f78436c69656e743a20696e76616c6964206d61696c626f780000604482015260640160405180910390fd5b6001600160a01b03821660808190526040805163234d8e3d60e21b81529051638d3638f4916004808201926020929091908290030181865afa1580156100d6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906100fa91906101c1565b63ffffffff1660a05261010c33610124565b505050506001600160a01b031660c052506101eb9050565b603380546001600160a01b038381166001600160a01b0319831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b80516001600160a01b038116811461018b575f80fd5b919050565b5f80604083850312156101a1575f80fd5b6101aa83610175565b91506101b860208401610175565b90509250929050565b5f602082840312156101d1575f80fd5b815163ffffffff811681146101e4575f80fd5b9392505050565b60805160a05160c05161565f61024d5f395f81816104200152612e4301525f818161053501528181610f20015281816118f4015281816124ce015261280c01525f81816106eb01528181610bbc015281816138e40152613b86015261565f5ff3fe60806040526004361061025d575f3560e01c80638d3638f41161014b578063d18ce35d116100c6578063e917a9621161007c578063efae508a11610062578063efae508a1461079d578063f2ed8c53146107bc578063f2fde38b146107db575f80fd5b8063e917a9621461075f578063e9198bf91461077e575f80fd5b8063de523cf3116100ac578063de523cf31461070d578063de9591bd14610739578063e7f921a21461074c575f80fd5b8063d18ce35d146106bb578063d5438eae146106da575f80fd5b80639c3f1e901161011b578063b1bd643611610101578063b1bd64361461065e578063b49c53a71461067d578063c0c53b8b1461069c575f80fd5b80639c3f1e90146105fd5780639c90b44314610633575f80fd5b80638d3638f4146105245780638da5cb5b1461056c57806393c448471461059657806396b4772a146105de575f80fd5b806356d5d475116101db57806371a15b38116101ab578063775313a111610191578063775313a1146104ae5780637f5a7c7b146104d957806382e2c43f14610505575f80fd5b806371a15b381461047b57806374b9e8381461049a575f80fd5b806356d5d475146103dd57806358427a8f146103f05780636afdd8501461040f578063715018a614610467575f80fd5b80632ead72f61161023057806341b477dd1161021657806341b477dd14610371578063440df4f41461039d57806349d462ef146103be575f80fd5b80632ead72f6146103335780633dfd387314610352575f80fd5b806302bb8e7d146102615780630e72cc061461029657806323b400b8146102b75780632dff692d146102f8575b5f80fd5b34801561026c575f80fd5b5061028061027b36600461408e565b6107fa565b60405161028d91906140f2565b60405180910390f35b3480156102a1575f80fd5b506102b56102b036600461412c565b610891565b005b3480156102c2575f80fd5b506102ea7f58f6d550e9ae6a46ae6966188cd29b4e1289485d2947276766029698d5dd811381565b60405190815260200161028d565b348015610303575f80fd5b5061032661031236600461408e565b60ce6020525f908152604090205460ff1681565b60405161028d9190614172565b34801561033e575f80fd5b506102ea61034d3660046141cd565b610992565b34801561035d575f80fd5b506102b561036c36600461412c565b6109b0565b34801561037c575f80fd5b5061039061038b3660046141e8565b610aac565b60405161028d9190614303565b3480156103a8575f80fd5b506103b1610b7d565b60405161028d91906143b9565b3480156103c9575f80fd5b506102b56103d8366004614402565b610b8e565b6102b56103eb36600461446a565b610ba4565b3480156103fb575f80fd5b5061039061040a3660046144d9565b610ce3565b34801561041a575f80fd5b506104427f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff909116815260200161028d565b348015610472575f80fd5b506102b5610dcd565b348015610486575f80fd5b506102b561049536600461457e565b610de0565b3480156104a5575f80fd5b50610280610e3a565b3480156104b9575f80fd5b506102ea6104c83660046141cd565b60ca6020525f908152604090205481565b3480156104e4575f80fd5b506065546104429073ffffffffffffffffffffffffffffffffffffffff1681565b348015610510575f80fd5b506102b561051f3660046145bd565b610e57565b34801561052f575f80fd5b506105577f000000000000000000000000000000000000000000000000000000000000000081565b60405163ffffffff909116815260200161028d565b348015610577575f80fd5b5060335473ffffffffffffffffffffffffffffffffffffffff16610442565b3480156105a1575f80fd5b506102806040518060400160405280600581526020017f352e362e3100000000000000000000000000000000000000000000000000000081525081565b3480156105e9575f80fd5b506102ea6105f8366004614631565b611198565b348015610608575f80fd5b5061061c61061736600461408e565b611254565b60405161028d9b9a99989796959493929190614663565b34801561063e575f80fd5b506102ea61064d36600461412c565b60cb6020525f908152604090205481565b348015610669575f80fd5b506102b56106783660046146d3565b611349565b348015610688575f80fd5b506102b5610697366004614402565b6113be565b3480156106a7575f80fd5b506102b56106b6366004614742565b6113d0565b3480156106c6575f80fd5b506102b56106d5366004614782565b611529565b3480156106e5575f80fd5b506104427f000000000000000000000000000000000000000000000000000000000000000081565b348015610718575f80fd5b506066546104429073ffffffffffffffffffffffffffffffffffffffff1681565b6102b56107473660046148f2565b6117c4565b6102b561075a36600461457e565b611b3a565b34801561076a575f80fd5b506102b56107793660046141e8565b611dba565b348015610789575f80fd5b506102b5610798366004614a53565b611fb1565b3480156107a8575f80fd5b506102b56107b73660046141cd565b61206d565b3480156107c7575f80fd5b506102ea6107d63660046141cd565b612081565b3480156107e6575f80fd5b506102b56107f536600461412c565b6120bd565b60cd6020525f90815260409020805461081290614aae565b80601f016020809104026020016040519081016040528092919081815260200182805461083e90614aae565b80156108895780601f1061086057610100808354040283529160200191610889565b820191905f5260205f20905b81548152906001019060200180831161086c57829003601f168201915b505050505081565b8073ffffffffffffffffffffffffffffffffffffffff81163b1515806108cb575073ffffffffffffffffffffffffffffffffffffffff8116155b6109425760405162461bcd60e51b815260206004820152602760248201527f4d61696c626f78436c69656e743a20696e76616c696420636f6e74726163742060448201527f73657474696e670000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b61094a612157565b50606680547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b5f806109a8609763ffffffff808616906121be16565b949350505050565b8073ffffffffffffffffffffffffffffffffffffffff81163b1515806109ea575073ffffffffffffffffffffffffffffffffffffffff8116155b610a5c5760405162461bcd60e51b815260206004820152602760248201527f4d61696c626f78436c69656e743a20696e76616c696420636f6e74726163742060448201527f73657474696e67000000000000000000000000000000000000000000000000006064820152608401610939565b610a64612157565b50606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b610b146040518060e001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f63ffffffff1681526020015f63ffffffff1681526020016060815260200160608152602001606081525090565b610b76602083013533610b2a6040860186614af9565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525063ffffffff9250610b7191505060208801886141cd565b6121d6565b5092915050565b6060610b89609761287b565b905090565b610b96612157565b610ba0828261292a565b5050565b3373ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001614610c4f5760405162461bcd60e51b815260206004820152602160248201527f4d61696c626f78436c69656e743a2073656e646572206e6f74206d61696c626f60448201527f78000000000000000000000000000000000000000000000000000000000000006064820152608401610939565b5f610c5985612977565b9050838114610cd05760405162461bcd60e51b815260206004820152602560248201527f456e726f6c6c656420726f7574657220646f6573206e6f74206d61746368207360448201527f656e6465720000000000000000000000000000000000000000000000000000006064820152608401610939565b610cdc858585856129c1565b5050505050565b610d4b6040518060e001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f63ffffffff1681526020015f63ffffffff1681526020016060815260200160608152602001606081525090565b610dc460c0850135610d63604087016020880161412c565b610d7060e0880188614af9565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250610db49250505060a0890160808a016141cd565b610b7160c08a0160a08b016141cd565b50949350505050565b610dd5612157565b610dde5f612ab9565b565b610de8612157565b805f5b81811015610e3457610e22848483818110610e0857610e08614b5a565b9050602002016020810190610e1d91906141cd565b612b2f565b610e2d600182614bb4565b9050610deb565b50505050565b60405180610120016040528060f8815260200161555b60f8913981565b5f610e9685858080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250612b6a92505050565b9050610ea181612be0565b8614610ed9576040517f5d70603300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80610120015163ffffffff16421115610f1e576040517f48d71b4400000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff1681610100015163ffffffff1614610f88576040517f710c117c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610f958160e00151612bea565b505f86815260ce602052604081205460ff166004811115610fb857610fb8614145565b14610fef576040517f2916ae3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f86815260cc602090815260409182902083518155908301516001820155908201516002820155606082015160038201556080820151600482015560a0820151600582015560c0820151600682015560e082015160078201805461010085015161012086015163ffffffff90811668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff928216640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009094169190951617919091171691909117905561014082015182919060088201906110df9082614c0b565b5050505f86815260ce60209081526040808320805460ff1916600217905560cd909152902061110f838583614cc7565b507f57f1f65270c1c2c1771948825ee86f8d23d11ab44b16eb9c213056e042d06e598686868686604051611147959493929190614daa565b60405180910390a1611190336111608360200151612bf4565b8360a001516111728560600151612bf4565b73ffffffffffffffffffffffffffffffffffffffff16929190612c82565b505050505050565b5f7f58f6d550e9ae6a46ae6966188cd29b4e1289485d2947276766029698d5dd81136111c7602084018461412c565b6111d7604085016020860161412c565b60408501356111ec6080870160608801614de2565b6111fc60a08801608089016141cd565b61120c60c0890160a08a016141cd565b60c089013561121e60e08b018b614af9565b6040516020016112379a99989796959493929190614e09565b604051602081830303815290604052805190602001209050919050565b60cc6020525f9081526040902080546001820154600283015460038401546004850154600586015460068701546007880154600889018054989997989697959694959394929363ffffffff80841694640100000000850482169468010000000000000000900490911692906112c890614aae565b80601f01602080910402602001604051908101604052809291908181526020018280546112f490614aae565b801561133f5780601f106113165761010080835404028352916020019161133f565b820191905f5260205f20905b81548152906001019060200180831161132257829003601f168201915b505050505090508b565b611351612157565b5f5b818110156113b9576113a783838381811061137057611370614b5a565b61138692602060409092020190810191506141cd565b84848481811061139857611398614b5a565b9050604002016020013561292a565b6113b2600182614bb4565b9050611353565b505050565b6113c6612157565b610ba08282612d40565b5f54610100900460ff16158080156113ee57505f54600160ff909116105b806114075750303b15801561140757505f5460ff166001145b6114795760405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a65640000000000000000000000000000000000006064820152608401610939565b5f805460ff1916600117905580156114b7575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6114c2848484612d56565b8015610e34575f80547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a150505050565b61153960a08601608087016141cd565b63ffffffff16421115611578576040517f2bfdf69b00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f806115f360c088013561159260408a0160208b0161412c565b61159f60e08b018b614af9565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f920191909152506115e39250505060a08c0160808d016141cd565b610b7160c08d0160a08e016141cd565b915091505f61160182612be0565b5f81815260cc602090815260409182902085518155908501516001820155908401516002820155606084015160038201556080840151600482015560a0840151600582015560c0840151600682015560e084015160078201805461010087015161012088015163ffffffff90811668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff928216640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff000000000000000090941691909516179190911716919091179055610140840151919250839160088201906116f39082614c0b565b5050505f81815260ce6020526040902080546001919060ff191682800217905550600160cb5f61172960408c0160208d0161412c565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020015f205f8282546117709190614bb4565b90915550611782905088888830612df5565b807f0efd3c66c8f382631c4c616ea17e61e4d15189963b7802c498d212bd09f39d0e846040516117b29190614303565b60405180910390a25050505050505050565b5f815167ffffffffffffffff8111156117df576117df6147ce565b604051908082528060200260200182016040528015611808578160200160208202803683370190505b5090505f5b8251811015611af5575f61183984838151811061182c5761182c614b5a565b6020026020010151612be0565b90505f8082815260ce602052604090205460ff16600481111561185e5761185e614145565b14611895576040517f2916ae3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8382815181106118a7576118a7614b5a565b6020026020010151610120015163ffffffff1642116118f2576040517fc55d99c600000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000063ffffffff1684838151811061192b5761192b614b5a565b6020026020010151610100015163ffffffff1614611975576040517f710c117c00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b61199b84838151811061198a5761198a614b5a565b602002602001015160e00151612bea565b508382815181106119ae576119ae614b5a565b6020908102919091018101515f83815260cc8352604090819020825181559282015160018401558101516002830155606081015160038301556080810151600483015560a0810151600583015560c0810151600683015560e081015160078301805461010084015161012085015163ffffffff90811668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff928216640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff0000000000000000909416919095161791909117169190911790556101408101519091906008820190611aa69082614c0b565b5050505f81815260ce60205260409020805460ff1916600417905582518190849084908110611ad757611ad7614b5a565b602090810291909101015250611aee600182614bb4565b905061180d565b50611aff81612fab565b7f536286146d4af271695884c3088546e593d6165b08a2e29d706a87b7db74b20181604051611b2e9190614ebc565b60405180910390a15050565b5f8167ffffffffffffffff811115611b5457611b546147ce565b604051908082528060200260200182016040528015611b8757816020015b6060815260200190600190039081611b725790505b5090505f5b82811015611d3c57600260ce5f868685818110611bab57611bab614b5a565b602090810292909201358352508101919091526040015f205460ff166004811115611bd857611bd8614145565b14611c0f576040517f2916ae3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b600360ce5f868685818110611c2657611c26614b5a565b602090810292909201358352508101919091526040015f20805460ff19166001836004811115611c5857611c58614145565b021790555060cd5f858584818110611c7257611c72614b5a565b9050602002013581526020019081526020015f208054611c9190614aae565b80601f0160208091040260200160405190810160405280929190818152602001828054611cbd90614aae565b8015611d085780601f10611cdf57610100808354040283529160200191611d08565b820191905f5260205f20905b815481529060010190602001808311611ceb57829003601f168201915b5050505050828281518110611d1f57611d1f614b5a565b6020908102919091010152611d35600182614bb4565b9050611b8c565b50611d7a8383808060200260200160405190810160405280939291908181526020018383602002808284375f92019190915250859250613012915050565b7fc993982486b74c2846b97472fb81c2ffe7b9b135062b8da6663d73886422fbad838383604051611dad93929190614f19565b60405180910390a1505050565b5f80611e19602084013533611dd26040870187614af9565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f9201919091525063ffffffff9250610b7191505060208901896141cd565b915091505f611e2782612be0565b5f81815260cc602090815260409182902085518155908501516001820155908401516002820155606084015160038201556080840151600482015560a0840151600582015560c0840151600682015560e084015160078201805461010087015161012088015163ffffffff90811668010000000000000000027fffffffffffffffffffffffffffffffffffffffff00000000ffffffffffffffff928216640100000000027fffffffffffffffffffffffffffffffffffffffffffffffff00000000000000009094169190951617919091171691909117905561014084015191925083916008820190611f199082614c0b565b5050505f81815260ce60209081526040808320805460ff1916600190811790915533845260cb9092528220805491929091611f55908490614bb4565b92505081905550611f73333084608001516111728660400151612bf4565b807f0efd3c66c8f382631c4c616ea17e61e4d15189963b7802c498d212bd09f39d0e84604051611fa39190614303565b60405180910390a250505050565b611fb9612157565b8281146120085760405162461bcd60e51b815260206004820152600760248201527f216c656e677468000000000000000000000000000000000000000000000000006044820152606401610939565b825f5b818110156111905761205b86868381811061202857612028614b5a565b905060200201602081019061203d91906141cd565b85858481811061204f5761204f614b5a565b90506020020135612d40565b612066600182614bb4565b905061200b565b612075612157565b61207e81612b2f565b50565b60408051602081019091525f80825260655490916120b79184919073ffffffffffffffffffffffffffffffffffffffff1661305c565b92915050565b6120c5612157565b73ffffffffffffffffffffffffffffffffffffffff811661214e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201527f64647265737300000000000000000000000000000000000000000000000000006064820152608401610939565b61207e81612ab9565b60335473ffffffffffffffffffffffffffffffffffffffff163314610dde5760405162461bcd60e51b815260206004820181905260248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152606401610939565b5f806121ca8484613071565b915091505b9250929050565b61223e6040518060e001604052805f73ffffffffffffffffffffffffffffffffffffffff1681526020015f67ffffffffffffffff1681526020015f63ffffffff1681526020015f63ffffffff1681526020016060815260200160608152602001606081525090565b60408051610160810182525f8082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820183905261010082018390526101208201929092526101408101919091526124866040517f4f7264657244617461280000000000000000000000000000000000000000000060208201527f627974657333322073656e6465722c0000000000000000000000000000000000602a8201527f6279746573333220726563697069656e742c000000000000000000000000000060398201527f6279746573333220696e707574546f6b656e2c00000000000000000000000000604b8201527f62797465733332206f7574707574546f6b656e2c000000000000000000000000605e8201527f75696e7432353620616d6f756e74496e2c00000000000000000000000000000060728201527f75696e7432353620616d6f756e744f75742c000000000000000000000000000060838201527f75696e743235362073656e6465724e6f6e63652c00000000000000000000000060958201527f75696e743332206f726967696e446f6d61696e2c00000000000000000000000060a98201527f75696e7433322064657374696e6174696f6e446f6d61696e2c0000000000000060bd8201527f75696e7433322066696c6c446561646c696e652c00000000000000000000000060d68201527f627974657320646174612900000000000000000000000000000000000000000060ea8201525f9060f50160405160208183030381529060405280519060200120905090565b87146124c1576040517f8703f77200000000000000000000000000000000000000000000000000000000815260048101889052602401610939565b6124ca85612b6a565b90507f000000000000000000000000000000000000000000000000000000000000000063ffffffff168160e0015163ffffffff16146125435760e08101516040517f56632acd00000000000000000000000000000000000000000000000000000000815263ffffffff9091166004820152602401610939565b73ffffffffffffffffffffffffffffffffffffffff8616815114612593576040517fddb5de5e00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b73ffffffffffffffffffffffffffffffffffffffff86165f90815260cb602052604090205460c0820151146125f4576040517f4d58136000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f612603826101000151612bea565b63ffffffff85166101208401526040805160018082528183019092529192505f9190816020015b604080516080810182525f8082526020808301829052928201819052606082015282525f1990920191018161262a5790505090506040518060800160405280846060015181526020018460a00151815260200183815260200184610100015163ffffffff1667ffffffffffffffff16815250815f815181106126ae576126ae614b5a565b60209081029190910101526040805160018082528183019092525f91816020015b604080516080810182525f8082526020808301829052928201819052606082015282525f199092019101816126cf575050604080516080808201835287830151825287015160208201525f91810182905260e087015163ffffffff16606082015282519293509183919061274557612745614b5a565b60209081029190910101526040805160018082528183019092525f91816020015b60408051606080820183525f8083526020830152918101919091528152602001906001900390816127665750506040805160608101825261010088015163ffffffff1681526020810187905291925081016127c0876130a9565b815250815f815181106127d5576127d5614b5a565b60200260200101819052506040518060e001604052808b73ffffffffffffffffffffffffffffffffffffffff16815260200161282e7f000000000000000000000000000000000000000000000000000000000000000090565b63ffffffff1667ffffffffffffffff1681526020018963ffffffff1681526020018863ffffffff168152602001848152602001838152602001828152509550505050509550959350505050565b60605f612887836130d2565b9050805167ffffffffffffffff8111156128a3576128a36147ce565b6040519080825280602002602001820160405280156128cc578160200160208202803683370190505b5091505f5b8151811015612923578181815181106128ec576128ec614b5a565b602002602001015183828151811061290657612906614b5a565b63ffffffff909216602092830291909101909101526001016128d1565b5050919050565b63ffffffff82165f81815260ca6020908152604091829020849055815192835282018390527fc3de732a98b24a2b5c6f67e8a7fb057ffc14046b83968a2c73e4148d2fba978b9101611b2e565b5f808061298e609763ffffffff808716906121be16565b91509150811561299f579392505050565b6129a884613160565b60405162461bcd60e51b815260040161093991906140f2565b5f805f6129ce8585613181565b9250925092505f5b8251811015612aaf57600160ce5f8584815181106129f6576129f6614b5a565b60209081029190910181015182528101919091526040015f205460ff166004811115612a2457612a24614145565b03612aa7578315612a8457612a7f838281518110612a4457612a44614b5a565b6020026020010151838381518110612a5e57612a5e614b5a565b6020026020010151806020019051810190612a799190614f76565b8a61319e565b612aa7565b612aa7838281518110612a9957612a99614b5a565b602002602001015189613413565b6001016129d6565b5050505050505050565b6033805473ffffffffffffffffffffffffffffffffffffffff8381167fffffffffffffffffffffffff0000000000000000000000000000000000000000831681179093556040519116919082907f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0905f90a35050565b612b43609763ffffffff8084169061366d16565b612b4c82613160565b90610ba05760405162461bcd60e51b815260040161093991906140f2565b60408051610160810182525f8082526020820181905291810182905260608082018390526080820183905260a0820183905260c0820183905260e0820183905261010082018390526101208201929092526101408101919091525f82806020019051810190612bd99190614fda565b9392505050565b5f6120b782613678565b5f6120b782612977565b5f73ffffffffffffffffffffffffffffffffffffffff821115612c7e5760405162461bcd60e51b8152602060048201526024808201527f5479706543617374733a2062797465733332546f41646472657373206f76657260448201527f666c6f77000000000000000000000000000000000000000000000000000000006064820152608401610939565b5090565b60405173ffffffffffffffffffffffffffffffffffffffff80851660248301528316604482015260648101829052610e349085907f23b872dd00000000000000000000000000000000000000000000000000000000906084015b60408051601f198184030181529190526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fffffffff0000000000000000000000000000000000000000000000000000000090931692909217909152613690565b610ba0609763ffffffff80851690849061378316565b5f54610100900460ff16612dd25760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610939565b612dda61378e565b612de3836109b0565b612dec82610891565b6113b981612ab9565b5f612e3f612e0660e0870187614af9565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284375f92019190915250612b6a92505050565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff1663137c29fe60405180606001604052806040518060400160405280612ea08760400151612bf4565b73ffffffffffffffffffffffffffffffffffffffff1681526020018660800151815250815260200188604001358152602001886080016020810190612ee591906141cd565b63ffffffff1681525060405180604001604052808673ffffffffffffffffffffffffffffffffffffffff1681526020018560800151815250886020016020810190612f30919061412c565b612f398a611198565b60405180610120016040528060f8815260200161555b60f891398a8a6040518863ffffffff1660e01b8152600401612f7797969594939291906150c2565b5f604051808303815f87803b158015612f8e575f80fd5b505af1158015612fa0573d5f803e3d5ffd5b505050505050505050565b5f60cc5f835f81518110612fc157612fc1614b5a565b60209081029190910181015182528101919091526040015f206007015463ffffffff1690506113b98134612ff485613812565b60655473ffffffffffffffffffffffffffffffffffffffff1661384b565b5f60cc5f845f8151811061302857613028614b5a565b60209081029190910181015182528101919091526040015f206007015463ffffffff169050610e348134612ff4868661386a565b5f6109a8848461306b87613878565b85613899565b5f81815260028301602052604081205481908061309e57613092858561396a565b92505f91506121cf9050565b6001925090506121cf565b6060816040516020016130bc919061518b565b6040516020818303038152906040529050919050565b60605f6130de83613975565b90508067ffffffffffffffff8111156130f9576130f96147ce565b604051908082528060200260200182016040528015613122578160200160208202803683370190505b5091505f5b8181101561292357613139848261397f565b5f1c83828151811061314d5761314d614b5a565b6020908102919091010152600101613127565b60606131718263ffffffff1661398a565b6040516020016130bc9190615238565b5f6060806131918486018661530f565b9250925092509250925092565b5f83815260cc60209081526040808320815161016081018352815481526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015463ffffffff80821660e08501526401000000008204811661010085015268010000000000000000909104166101208301526008810180546101408401919061324790614aae565b80601f016020809104026020016040519081016040528092919081815260200182805461327390614aae565b80156132be5780601f10613295576101008083540402835291602001916132be565b820191905f5260205f20905b8154815290600101906020018083116132a157829003601f168201915b50505050508152505090508163ffffffff1681610100015163ffffffff1614613313576040517feb12798200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015f85815260ce602052604090205460ff16600481111561333757613337614145565b1461336e576040517f2916ae3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f84815260ce60205260408120805460ff1916600317905561338f84612bf4565b6040805187815273ffffffffffffffffffffffffffffffffffffffff831660208201529192507fa569bfd2e3bd9bd14cfdabad61aef5f3d5b18b0fcdf78805e65349dda2210fbc910160405180910390a1610cdc8183608001516133f68560400151612bf4565b73ffffffffffffffffffffffffffffffffffffffff169190613a27565b5f82815260cc60209081526040808320815161016081018352815481526001820154938101939093526002810154918301919091526003810154606083015260048101546080830152600581015460a0830152600681015460c0830152600781015463ffffffff80821660e0850152640100000000820481166101008501526801000000000000000090910416610120830152600881018054610140840191906134bc90614aae565b80601f01602080910402602001604051908101604052809291908181526020018280546134e890614aae565b80156135335780601f1061350a57610100808354040283529160200191613533565b820191905f5260205f20905b81548152906001019060200180831161351657829003601f168201915b50505050508152505090508163ffffffff1681610100015163ffffffff1614613588576040517feb12798200000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60015f84815260ce602052604090205460ff1660048111156135ac576135ac614145565b146135e3576040517f2916ae3300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b5f83815260ce60205260408120805460ff19166004179055815161360690612bf4565b6040805186815273ffffffffffffffffffffffffffffffffffffffff831660208201529192507f5e9f0820fcfb53b644becb775b651bae68c337106f21433e526551d1e02c1c0e910160405180910390a1610e348183608001516133f68560400151612bf4565b5f612bd98383613a7d565b5f613682826130a9565b805190602001209050919050565b5f6136f1826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c65648152508573ffffffffffffffffffffffffffffffffffffffff16613a999092919063ffffffff16565b905080515f148061371157508080602001905181019061371191906153d5565b6113b95760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e60448201527f6f742073756363656564000000000000000000000000000000000000000000006064820152608401610939565b610e34838383613aa7565b5f54610100900460ff1661380a5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610939565b610dde613ac3565b604080515f808252602082019092526060916120b791849082613845565b60608152602001906001900390816138305790505b50613b48565b5f61386185858561385b89613878565b86613b77565b95945050505050565b6060612bd960018484613b48565b63ffffffff81165f90815260ca60205260409020546060906120b790613c32565b5f806138a486612977565b6040517f81d2ea9500000000000000000000000000000000000000000000000000000000815290915073ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016906381d2ea959061392190899085908a908a908a906004016153f0565b602060405180830381865afa15801561393c573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906139609190614f76565b9695505050505050565b5f612bd98383613c4e565b5f6120b782613c65565b5f612bd98383613c6e565b60605f61399683613c94565b60010190505f8167ffffffffffffffff8111156139b5576139b56147ce565b6040519080825280601f01601f1916602001820160405280156139df576020820181803683370190505b5090508181016020015b5f19017f3031323334353637383961626364656600000000000000000000000000000000600a86061a8153600a85049450846139e957509392505050565b60405173ffffffffffffffffffffffffffffffffffffffff83166024820152604481018290526113b99084907fa9059cbb0000000000000000000000000000000000000000000000000000000090606401612cdc565b5f8181526002830160205260408120819055612bd98383613d75565b60606109a884845f85613d80565b5f82815260028401602052604081208290556109a88484613e70565b5f54610100900460ff16613b3f5760405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e670000000000000000000000000000000000000000006064820152608401610939565b610dde33612ab9565b6060838383604051602001613b5f9392919061544f565b60405160208183030381529060405290509392505050565b5f80613b8287612977565b90507f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166310b83dc08789848989896040518763ffffffff1660e01b8152600401613be69594939291906153f0565b60206040518083038185885af1158015613c02573d5f803e3d5ffd5b50505050506040513d601f19601f82011682018060405250810190613c279190614f76565b979650505050505050565b60606120b75f833360405180602001604052805f815250613e7b565b5f8181526001830160205260408120541515612bd9565b5f6120b7825490565b5f825f018281548110613c8357613c83614b5a565b905f5260205f200154905092915050565b5f807a184f03e93ff9f4daa797ed6e38ed64bf6a1f0100000000000000008310613cdc577a184f03e93ff9f4daa797ed6e38ed64bf6a1f010000000000000000830492506040015b6d04ee2d6d415b85acef81000000008310613d08576d04ee2d6d415b85acef8100000000830492506020015b662386f26fc100008310613d2657662386f26fc10000830492506010015b6305f5e1008310613d3e576305f5e100830492506008015b6127108310613d5257612710830492506004015b60648310613d64576064830492506002015b600a83106120b75760010192915050565b5f612bd98383613eb0565b606082471015613df85760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f60448201527f722063616c6c00000000000000000000000000000000000000000000000000006064820152608401610939565b5f808673ffffffffffffffffffffffffffffffffffffffff168587604051613e20919061547b565b5f6040518083038185875af1925050503d805f8114613e5a576040519150601f19603f3d011682016040523d82523d5f602084013e613e5f565b606091505b5091509150613c2787838387613f93565b5f612bd98383614018565b6060600185858585604051602001613e97959493929190615496565b6040516020818303038152906040529050949350505050565b5f8181526001830160205260408120548015613f8a575f613ed260018361551a565b85549091505f90613ee59060019061551a565b9050818114613f44575f865f018281548110613f0357613f03614b5a565b905f5260205f200154905080875f018481548110613f2357613f23614b5a565b5f918252602080832090910192909255918252600188019052604090208390555b8554869080613f5557613f5561552d565b600190038181905f5260205f20015f90559055856001015f8681526020019081526020015f205f9055600193505050506120b7565b5f9150506120b7565b6060831561400e5782515f036140075773ffffffffffffffffffffffffffffffffffffffff85163b6140075760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e74726163740000006044820152606401610939565b50816109a8565b6109a88383614064565b5f81815260018301602052604081205461405d57508154600181810184555f8481526020808220909301849055845484825282860190935260409020919091556120b7565b505f6120b7565b8151156140745781518083602001fd5b8060405162461bcd60e51b815260040161093991906140f2565b5f6020828403121561409e575f80fd5b5035919050565b5f5b838110156140bf5781810151838201526020016140a7565b50505f910152565b5f81518084526140de8160208601602086016140a5565b601f01601f19169290920160200192915050565b602081525f612bd960208301846140c7565b803573ffffffffffffffffffffffffffffffffffffffff81168114614127575f80fd5b919050565b5f6020828403121561413c575f80fd5b612bd982614104565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b60208101600583106141ab577f4e487b71000000000000000000000000000000000000000000000000000000005f52602160045260245ffd5b91905290565b63ffffffff8116811461207e575f80fd5b8035614127816141b1565b5f602082840312156141dd575f80fd5b8135612bd9816141b1565b5f602082840312156141f8575f80fd5b813567ffffffffffffffff81111561420e575f80fd5b820160608185031215612bd9575f80fd5b5f815180845260208085019450602084015f5b838110156142785781518051885283810151848901526040808201519089015260609081015167ffffffffffffffff169088015260809096019590820190600101614232565b509495945050505050565b5f82825180855260208086019550808260051b8401018186015f5b848110156142f657858303601f190189528151805167ffffffffffffffff16845284810151858501526040908101516060918501829052906142e2818601836140c7565b9a86019a945050509083019060010161429e565b5090979650505050505050565b6020815273ffffffffffffffffffffffffffffffffffffffff825116602082015267ffffffffffffffff60208301511660408201525f6040830151614350606084018263ffffffff169052565b50606083015163ffffffff8116608084015250608083015160e060a084015261437d61010084018261421f565b905060a0840151601f19808584030160c086015261439b838361421f565b925060c08601519150808584030160e0860152506138618282614283565b602080825282518282018190525f9190848201906040850190845b818110156143f657835163ffffffff16835292840192918401916001016143d4565b50909695505050505050565b5f8060408385031215614413575f80fd5b823561441e816141b1565b946020939093013593505050565b5f8083601f84011261443c575f80fd5b50813567ffffffffffffffff811115614453575f80fd5b6020830191508360208285010111156121cf575f80fd5b5f805f806060858703121561447d575f80fd5b8435614488816141b1565b935060208501359250604085013567ffffffffffffffff8111156144aa575f80fd5b6144b68782880161442c565b95989497509550505050565b5f61010082840312156144d3575f80fd5b50919050565b5f805f604084860312156144eb575f80fd5b833567ffffffffffffffff80821115614502575f80fd5b61450e878388016144c2565b94506020860135915080821115614523575f80fd5b506145308682870161442c565b9497909650939450505050565b5f8083601f84011261454d575f80fd5b50813567ffffffffffffffff811115614564575f80fd5b6020830191508360208260051b85010111156121cf575f80fd5b5f806020838503121561458f575f80fd5b823567ffffffffffffffff8111156145a5575f80fd5b6145b18582860161453d565b90969095509350505050565b5f805f805f606086880312156145d1575f80fd5b85359450602086013567ffffffffffffffff808211156145ef575f80fd5b6145fb89838a0161442c565b90965094506040880135915080821115614613575f80fd5b506146208882890161442c565b969995985093965092949392505050565b5f60208284031215614641575f80fd5b813567ffffffffffffffff811115614657575f80fd5b6109a8848285016144c2565b5f6101608d83528c60208401528b60408401528a60608401528960808401528860a08401528760c084015263ffffffff80881660e085015280871661010085015280861661012085015250806101408401526146c1818401856140c7565b9e9d5050505050505050505050505050565b5f80602083850312156146e4575f80fd5b823567ffffffffffffffff808211156146fb575f80fd5b818501915085601f83011261470e575f80fd5b81358181111561471c575f80fd5b8660208260061b8501011115614730575f80fd5b60209290920196919550909350505050565b5f805f60608486031215614754575f80fd5b61475d84614104565b925061476b60208501614104565b915061477960408501614104565b90509250925092565b5f805f805f60608688031215614796575f80fd5b853567ffffffffffffffff808211156147ad575f80fd5b6147b989838a016144c2565b965060208801359150808211156145ef575f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52604160045260245ffd5b604051610160810167ffffffffffffffff8111828210171561481f5761481f6147ce565b60405290565b604051601f8201601f1916810167ffffffffffffffff8111828210171561484e5761484e6147ce565b604052919050565b5f67ffffffffffffffff82111561486f5761486f6147ce565b5060051b60200190565b5f67ffffffffffffffff821115614892576148926147ce565b50601f01601f191660200190565b5f82601f8301126148af575f80fd5b81356148c26148bd82614879565b614825565b8181528460208386010111156148d6575f80fd5b816020850160208301375f918101602001919091529392505050565b5f6020808385031215614903575f80fd5b823567ffffffffffffffff8082111561491a575f80fd5b818501915085601f83011261492d575f80fd5b813561493b6148bd82614856565b81815260059190911b83018401908481019088831115614959575f80fd5b8585015b83811015614a4657803585811115614973575f80fd5b8601610160818c03601f190181131561498a575f80fd5b6149926147fb565b8983013581526040808401358b830152606080850135828401526080915081850135818401525060a0808501358284015260c0915081850135818401525060e0808501358284015261010091506149ea8286016141c2565b908301526101206149fc8582016141c2565b828401526101409150614a108286016141c2565b90830152918301359188831115614a25575f80fd5b614a338e8c858701016148a0565b908201528552505091860191860161495d565b5098975050505050505050565b5f805f8060408587031215614a66575f80fd5b843567ffffffffffffffff80821115614a7d575f80fd5b614a898883890161453d565b90965094506020870135915080821115614aa1575f80fd5b506144b68782880161453d565b600181811c90821680614ac257607f821691505b6020821081036144d3577f4e487b71000000000000000000000000000000000000000000000000000000005f52602260045260245ffd5b5f8083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112614b2c575f80fd5b83018035915067ffffffffffffffff821115614b46575f80fd5b6020019150368190038213156121cf575f80fd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603260045260245ffd5b7f4e487b71000000000000000000000000000000000000000000000000000000005f52601160045260245ffd5b808201808211156120b7576120b7614b87565b601f8211156113b957805f5260205f20601f840160051c81016020851015614bec5750805b601f840160051c820191505b81811015610cdc575f8155600101614bf8565b815167ffffffffffffffff811115614c2557614c256147ce565b614c3981614c338454614aae565b84614bc7565b602080601f831160018114614c6c575f8415614c555750858301515b5f19600386901b1c1916600185901b178555611190565b5f85815260208120601f198616915b82811015614c9a57888601518255948401946001909101908401614c7b565b5085821015614cb757878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b67ffffffffffffffff831115614cdf57614cdf6147ce565b614cf383614ced8354614aae565b83614bc7565b5f601f841160018114614d24575f8515614d0d5750838201355b5f19600387901b1c1916600186901b178355610cdc565b5f83815260208120601f198716915b82811015614d535786850135825560209485019460019092019101614d33565b5086821015614d6f575f1960f88860031b161c19848701351681555b505060018560011b0183555050505050565b81835281816020850137505f602082840101525f6020601f19601f840116840101905092915050565b858152606060208201525f614dc3606083018688614d81565b8281036040840152614dd6818587614d81565b98975050505050505050565b5f60208284031215614df2575f80fd5b813567ffffffffffffffff81168114612bd9575f80fd5b5f6101208c835273ffffffffffffffffffffffffffffffffffffffff808d166020850152808c1660408501525089606084015267ffffffffffffffff8916608084015263ffffffff80891660a085015280881660c0850152508560e084015280610100840152614e7c8184018587614d81565b9d9c50505050505050505050505050565b5f815180845260208085019450602084015f5b8381101561427857815187529582019590820190600101614ea0565b602081525f612bd96020830184614e8d565b5f8282518085526020808601955060208260051b840101602086015f5b848110156142f657601f19868403018952614f078383516140c7565b98840198925090830190600101614eeb565b604081528260408201525f7f07ffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff841115614f50575f80fd5b8360051b8086606085013782018281036060908101602085015261396090820185614ece565b5f60208284031215614f86575f80fd5b5051919050565b8051614127816141b1565b5f82601f830112614fa7575f80fd5b8151614fb56148bd82614879565b818152846020838601011115614fc9575f80fd5b6109a88260208301602087016140a5565b5f60208284031215614fea575f80fd5b815167ffffffffffffffff80821115615001575f80fd5b908301906101608286031215615015575f80fd5b61501d6147fb565b825181526020830151602082015260408301516040820152606083015160608201526080830151608082015260a083015160a082015260c083015160c082015261506960e08401614f8d565b60e082015261010061507c818501614f8d565b9082015261012061508e848201614f8d565b9082015261014083810151838111156150a5575f80fd5b6150b188828701614f98565b918301919091525095945050505050565b5f6101406150f1838b51805173ffffffffffffffffffffffffffffffffffffffff168252602090810151910152565b60208a0151604084015260408a01516060840152615132608084018a805173ffffffffffffffffffffffffffffffffffffffff168252602090810151910152565b73ffffffffffffffffffffffffffffffffffffffff881660c08401528660e084015280610100840152615167818401876140c7565b905082810361012084015261517d818587614d81565b9a9950505050505050505050565b6020815281516020820152602082015160408201526040820151606082015260608201516080820152608082015160a082015260a082015160c082015260c082015160e08201525f60e08301516101006151ec8185018363ffffffff169052565b84015190506101206152058482018363ffffffff169052565b840151905061014061521e8482018363ffffffff169052565b8401516101608481015290506109a86101808401826140c7565b7f4e6f20726f7574657220656e726f6c6c656420666f7220646f6d61696e3a200081525f825161526f81601f8501602087016140a5565b91909101601f0192915050565b801515811461207e575f80fd5b5f82601f830112615298575f80fd5b813560206152a86148bd83614856565b82815260059290921b840181019181810190868411156152c6575f80fd5b8286015b8481101561530457803567ffffffffffffffff8111156152e8575f80fd5b6152f68986838b01016148a0565b8452509183019183016152ca565b509695505050505050565b5f805f60608486031215615321575f80fd5b833561532c8161527c565b925060208481013567ffffffffffffffff80821115615349575f80fd5b818701915087601f83011261535c575f80fd5b813561536a6148bd82614856565b81815260059190911b8301840190848101908a831115615388575f80fd5b938501935b828510156153a65784358252938501939085019061538d565b9650505060408701359250808311156153bd575f80fd5b50506153cb86828701615289565b9150509250925092565b5f602082840312156153e5575f80fd5b8151612bd98161527c565b63ffffffff8616815284602082015260a060408201525f61541460a08301866140c7565b828103606084015261542681866140c7565b91505073ffffffffffffffffffffffffffffffffffffffff831660808301529695505050505050565b8315158152606060208201525f6154696060830185614e8d565b82810360408401526139608185614ece565b5f825161548c8184602087016140a5565b9190910192915050565b7fffff0000000000000000000000000000000000000000000000000000000000008660f01b1681528460028201528360228201527fffffffffffffffffffffffffffffffffffffffff0000000000000000000000008360601b1660428201525f82516155098160568501602087016140a5565b919091016056019695505050505050565b818103818111156120b7576120b7614b87565b7f4e487b71000000000000000000000000000000000000000000000000000000005f52603160045260245ffdfe4761736c65737343726f7373436861696e4f72646572207769746e657373294761736c65737343726f7373436861696e4f726465722861646472657373206f726967696e536574746c65722c6164647265737320757365722c75696e74323536206e6f6e63652c75696e743634206f726967696e436861696e49642c75696e743332206f70656e446561646c696e652c75696e7433322066696c6c446561646c696e652c62797465733332206f7264657244617461547970652c6279746573206f726465724461746129546f6b656e5065726d697373696f6e73286164647265737320746f6b656e2c75696e7432353620616d6f756e7429a164736f6c6343000819000a";
+const isSuperArgs = (xs) => xs.length > 1;
+
+export class Hyperlane7683__factory extends ContractFactory {
+  constructor(...args) {
+    if (isSuperArgs(args)) {
+      super(...args);
+    } else {
+      super(_abi, _bytecode, args[0]);
+    }
+  }
+
+  deploy( _mailbox, _permit2, overrides ) {
+      return super.deploy( _mailbox, _permit2, overrides || {} );
+  }
+  getDeployTransaction( _mailbox, _permit2, overrides ) {
+    return super.getDeployTransaction(_mailbox, _permit2, overrides || {});
+  }
+  attach(address) {
+    return super.attach(address);
+  }
+  connect(signer) {
+    return super.connect(signer);
+  }
+
+  static bytecode = _bytecode;
+  static abi = _abi;
+  static createInterface() {
+    return new utils.Interface(_abi);
+  }
+  static connect(
+    address,
+    signerOrProvider
+  ) {
+    return new Contract(address, _abi, signerOrProvider);
+  }
+}
+export class EvmIntentTokenAdapter extends EvmTokenAdapter {
+  contract;
+  intent;
+  constructor(
+    chainName,
+    multiProvider,
+    addresses,
+    contractFactory = ERC20__factory,
+    intentFactory = Hyperlane7683__factory,
+  ) {
+    super(chainName, multiProvider, addresses);
+    this.contract = contractFactory.connect(
+      addresses.token,
+      this.getProvider(),
+    );
+    this.intent = intentFactory.connect(addresses.router, this.getProvider());
+  }
+  async populateOpenOrderTx({
+    sender,
+    recipient,
+    outputToken,
+    amountIn,
+    amountOut,
+    destinationDomain,
+    fillDeadline,
+  }) {
+    const orderDataType =
+      '0x8bdb0a9884d629947116d36a34743784d757b4d9208fbcb810bd73097583283e';
+    const senderNonce = await this.intent.senderNonce(sender);
+
+    return this.intent.populateTransaction.open({
+      fillDeadline,
+      orderDataType,
+      orderData: encodeAbiParameters(
+        [
+          {
+            components: [
+              { name: 'sender', type: 'bytes32' },
+              { name: 'recipient', type: 'bytes32' },
+              { name: 'inputToken', type: 'bytes32' },
+              { name: 'outputToken', type: 'bytes32' },
+              { name: 'amountIn', type: 'uint256' },
+              { name: 'amountOut', type: 'uint256' },
+              { name: 'senderNonce', type: 'uint256' },
+              { name: 'originDomain', type: 'uint32' },
+              { name: 'destinationDomain', type: 'uint32' },
+              { name: 'fillDeadline', type: 'uint32' },
+              { name: 'data', type: 'bytes' },
+            ],
+            name: 'orderData',
+            type: 'tuple',
+          },
+        ],
+        [
+          {
+            sender: pad(sender),
+            recipient: pad(recipient),
+            inputToken: pad(this.addresses.token),
+            outputToken: pad(outputToken),
+            amountIn: BigInt(amountIn),
+            amountOut: BigInt(amountOut),
+            senderNonce: BigInt(senderNonce.toString()),
+            originDomain: this.multiProvider.getChainId(this.chainName),
+            destinationDomain: parseInt(destinationDomain),
+            fillDeadline: parseInt(fillDeadline),
+            data: '0x',
+          },
+        ],
+      ),
+    });
+  }
+}
 export class Token {
     protocol;
     constructor(args) {
@@ -31,9 +145,15 @@ export class Token {
      * @throws If token is an NFT (TODO NFT Adapter support)
      */
     getAdapter(multiProvider) {
-        const { standard, chainName, addressOrDenom } = this;
+        const { standard, chainName, addressOrDenom, collateralAddressOrDenom } = this;
         assert(!this.isNft(), 'NFT adapters not yet supported');
         assert(multiProvider.tryGetChainMetadata(chainName), `Token chain ${chainName} not found in multiProvider`);
+        if (standard === 'Intent' && collateralAddressOrDenom) {
+            return new EvmIntentTokenAdapter(chainName, multiProvider, {
+                token: addressOrDenom,
+                router: collateralAddressOrDenom,
+            })
+        }
         if (standard === TokenStandard.ERC20) {
             return new EvmTokenAdapter(chainName, multiProvider, {
                 token: addressOrDenom,
diff --git a/dist/token/TokenStandard.d.ts b/dist/token/TokenStandard.d.ts
index 6821dc5d149939fd7bafabc997af3f9f3406596b..ed735a1233b51f31109e21e1d189a8fccbe688f1 100644
--- a/dist/token/TokenStandard.d.ts
+++ b/dist/token/TokenStandard.d.ts
@@ -2,6 +2,7 @@ import { ProtocolType } from '@hyperlane-xyz/utils';
 import { ProviderType } from '../providers/ProviderType.js';
 import { TokenType } from './config.js';
 export declare enum TokenStandard {
+    Intent = "Intent",
     ERC20 = "ERC20",
     ERC721 = "ERC721",
     EvmNative = "EvmNative",
diff --git a/dist/token/TokenStandard.js b/dist/token/TokenStandard.js
index cec12d7575fe5f57eabde4a9c58b422e77133e67..8c3256f267b52fd35bfbf4007d434bbc1555b1c9 100644
--- a/dist/token/TokenStandard.js
+++ b/dist/token/TokenStandard.js
@@ -4,6 +4,7 @@ import { TokenType } from './config.js';
 export var TokenStandard;
 (function (TokenStandard) {
     // EVM
+    TokenStandard["Intent"] = "Intent";
     TokenStandard["ERC20"] = "ERC20";
     TokenStandard["ERC721"] = "ERC721";
     TokenStandard["EvmNative"] = "EvmNative";
@@ -39,6 +40,7 @@ export var TokenStandard;
 // Allows for omission of protocol field in token args
 export const TOKEN_STANDARD_TO_PROTOCOL = {
     // EVM
+    Intent: ProtocolType.Ethereum,
     ERC20: ProtocolType.Ethereum,
     ERC721: ProtocolType.Ethereum,
     EvmNative: ProtocolType.Ethereum,
diff --git a/dist/warp/WarpCore.js b/dist/warp/WarpCore.js
index bf0719e27fc946986393f03d8289d24ba7c3d4df..30145c9b31ac50c9d90c5bd51b6000bbf09bfb59 100644
--- a/dist/warp/WarpCore.js
+++ b/dist/warp/WarpCore.js
@@ -1,9 +1,9 @@
-import { ProtocolType, assert, convertDecimals, convertToProtocolAddress, isValidAddress, isZeroishAddress, rootLogger, } from '@hyperlane-xyz/utils';
+import { ProtocolType, assert, convertToProtocolAddress, isValidAddress, isZeroishAddress, rootLogger } from '@hyperlane-xyz/utils';
 import { estimateTransactionFeeEthersV5ForGasUnits, } from '../providers/transactionFeeEstimators.js';
 import { Token } from '../token/Token.js';
 import { TokenAmount } from '../token/TokenAmount.js';
 import { parseTokenConnectionId } from '../token/TokenConnection.js';
-import { MINT_LIMITED_STANDARDS, TOKEN_COLLATERALIZED_STANDARDS, TOKEN_STANDARD_TO_PROVIDER_TYPE, TokenStandard, } from '../token/TokenStandard.js';
+import { TOKEN_STANDARD_TO_PROVIDER_TYPE, TokenStandard } from '../token/TokenStandard.js';
 import { EVM_TRANSFER_REMOTE_GAS_ESTIMATE } from '../token/adapters/EvmTokenAdapter.js';
 import { WarpCoreConfigSchema, WarpTxCategory, } from './types.js';
 export class WarpCore {
@@ -72,7 +72,7 @@ export class WarpCore {
         }
         else {
             // Otherwise, compute IGP quote via the adapter
-            const hypAdapter = originToken.getHypAdapter(this.multiProvider, destinationName);
+            const hypAdapter = originToken.getAdapter(this.multiProvider);
             const destinationDomainId = this.multiProvider.getDomainId(destination);
             const quote = await hypAdapter.quoteTransferRemoteGas(destinationDomainId);
             gasAmount = BigInt(quote.amount);
@@ -175,15 +175,14 @@ export class WarpCore {
     async getTransferRemoteTxs({ originTokenAmount, destination, sender, recipient, interchainFee, }) {
         const transactions = [];
         const { token, amount } = originTokenAmount;
-        const destinationName = this.multiProvider.getChainName(destination);
         const destinationDomainId = this.multiProvider.getDomainId(destination);
         const providerType = TOKEN_STANDARD_TO_PROVIDER_TYPE[token.standard];
-        const hypAdapter = token.getHypAdapter(this.multiProvider, destinationName);
+        const adapter = token.getAdapter(this.multiProvider);
         if (await this.isApproveRequired({ originTokenAmount, owner: sender })) {
             this.logger.info(`Approval required for transfer of ${token.symbol}`);
-            const approveTxReq = await hypAdapter.populateApproveTx({
+            const approveTxReq = await adapter.populateApproveTx({
                 weiAmountOrId: amount.toString(),
-                recipient: token.addressOrDenom,
+                recipient: token.collateralAddressOrDenom,
             });
             this.logger.debug(`Approval tx for ${token.symbol} populated`);
             const approveTx = {
@@ -193,21 +192,14 @@ export class WarpCore {
             };
             transactions.push(approveTx);
         }
-        if (!interchainFee) {
-            interchainFee = await this.getInterchainTransferFee({
-                originToken: token,
-                destination,
-            });
-        }
-        const transferTxReq = await hypAdapter.populateTransferRemoteTx({
-            weiAmountOrId: amount.toString(),
-            destination: destinationDomainId,
-            fromAccountOwner: sender,
+        const transferTxReq = await adapter.populateOpenOrderTx({
+            sender,
             recipient,
-            interchainGas: {
-                amount: interchainFee.amount,
-                addressOrDenom: interchainFee.token.addressOrDenom,
-            },
+            outputToken: token.getConnections().find((c) => c.token.chainName === destination)?.token.addressOrDenom,
+            amountIn: amount.toString(),
+            amountOut: amount.toString(),
+            destinationDomain: `${destinationDomainId}`,
+            fillDeadline: `${Math.floor(Date.now() / 1000) + 60 * 60 * 24}`,
         });
         this.logger.debug(`Remote transfer tx for ${token.symbol} populated`);
         const transferTx = {
@@ -273,29 +265,7 @@ export class WarpCore {
      * Checks if destination chain's collateral is sufficient to cover the transfer
      */
     async isDestinationCollateralSufficient({ originTokenAmount, destination, }) {
-        const { token: originToken, amount } = originTokenAmount;
-        const destinationName = this.multiProvider.getChainName(destination);
-        this.logger.debug(`Checking collateral for ${originToken.symbol} to ${destination}`);
-        const destinationToken = originToken.getConnectionForChain(destinationName)?.token;
-        assert(destinationToken, `No connection found for ${destinationName}`);
-        if (!TOKEN_COLLATERALIZED_STANDARDS.includes(destinationToken.standard) &&
-            !MINT_LIMITED_STANDARDS.includes(destinationToken.standard)) {
-            this.logger.debug(`${destinationToken.symbol} is not collateralized, skipping`);
-            return true;
-        }
-        let destinationBalance;
-        const adapter = destinationToken.getAdapter(this.multiProvider);
-        if (destinationToken.standard === TokenStandard.EvmHypXERC20 ||
-            destinationToken.standard === TokenStandard.EvmHypXERC20Lockbox) {
-            destinationBalance = await adapter.getMintLimit();
-        }
-        else {
-            destinationBalance = await adapter.getBalance(destinationToken.addressOrDenom);
-        }
-        const destinationBalanceInOriginDecimals = convertDecimals(destinationToken.decimals, originToken.decimals, destinationBalance.toString());
-        const isSufficient = BigInt(destinationBalanceInOriginDecimals) >= amount;
-        this.logger.debug(`${originTokenAmount.token.symbol} to ${destination} has ${isSufficient ? 'sufficient' : 'INSUFFICIENT'} collateral`);
-        return isSufficient;
+        return true;
     }
     /**
      * Checks if a token transfer requires an approval tx first
@@ -303,7 +273,7 @@ export class WarpCore {
     async isApproveRequired({ originTokenAmount, owner, }) {
         const { token, amount } = originTokenAmount;
         const adapter = token.getAdapter(this.multiProvider);
-        const isRequired = await adapter.isApproveRequired(owner, token.addressOrDenom, amount);
+        const isRequired = await adapter.isApproveRequired(owner, token.collateralAddressOrDenom, amount);
         this.logger.debug(`Approval is${isRequired ? '' : ' not'} required for transfer of ${token.symbol}`);
         return isRequired;
     }
@@ -317,15 +287,6 @@ export class WarpCore {
         const recipientError = this.validateRecipient(recipient, destination);
         if (recipientError)
             return recipientError;
-        const amountError = this.validateAmount(originTokenAmount);
-        if (amountError)
-            return amountError;
-        const destinationCollateralError = await this.validateDestinationCollateral(originTokenAmount, destination);
-        if (destinationCollateralError)
-            return destinationCollateralError;
-        const originCollateralError = await this.validateOriginCollateral(originTokenAmount);
-        if (originCollateralError)
-            return originCollateralError;
         const balancesError = await this.validateTokenBalances(originTokenAmount, destination, sender, senderPubKey);
         if (balancesError)
             return balancesError;
@@ -393,41 +354,6 @@ export class WarpCore {
         // Check 1: Check basic token balance
         if (amount > senderBalance)
             return { amount: 'Insufficient balance' };
-        // Check 2: Ensure the balance can cover interchain fee
-        // Slightly redundant with Check 4 but gives more specific error messages
-        const interchainQuote = await this.getInterchainTransferFee({
-            originToken,
-            destination,
-        });
-        // Get balance of the IGP fee token, which may be different from the transfer token
-        const interchainQuoteTokenBalance = originToken.isFungibleWith(interchainQuote.token)
-            ? senderBalanceAmount
-            : await interchainQuote.token.getBalance(this.multiProvider, sender);
-        if (interchainQuoteTokenBalance.amount < interchainQuote.amount) {
-            return {
-                amount: `Insufficient ${interchainQuote.token.symbol} for interchain gas`,
-            };
-        }
-        // Check 3: Simulates the transfer by getting the local gas fee
-        const localQuote = await this.getLocalTransferFeeAmount({
-            originToken,
-            destination,
-            sender,
-            senderPubKey,
-            interchainFee: interchainQuote,
-        });
-        const feeEstimate = { interchainQuote, localQuote };
-        // Check 4: Ensure balances can cover the COMBINED amount and fees
-        const maxTransfer = await this.getMaxTransferAmount({
-            balance: senderBalanceAmount,
-            destination,
-            sender,
-            senderPubKey,
-            feeEstimate,
-        });
-        if (amount > maxTransfer.amount) {
-            return { amount: 'Insufficient balance for gas and transfer' };
-        }
         return null;
     }
     /**
